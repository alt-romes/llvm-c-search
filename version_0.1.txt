Analysis
--------
(Functions)
LLVMBool LLVMVerifyModule (LLVMModuleRef M, LLVMVerifierFailureAction Action, char **OutMessage)
LLVMBool LLVMVerifyFunction (LLVMValueRef Fn, LLVMVerifierFailureAction Action)
void LLVMViewFunctionCFG (LLVMValueRef Fn)
void LLVMViewFunctionCFGOnly (LLVMValueRef Fn)

Bit Reader
----------
(Functions)
LLVMBool LLVMParseBitcode (LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutModule, char **OutMessage)
LLVMBool LLVMParseBitcode2 (LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutModule)
LLVMBool LLVMParseBitcodeInContext (LLVMContextRef ContextRef, LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutModule, char **OutMessage)
LLVMBool LLVMParseBitcodeInContext2 (LLVMContextRef ContextRef, LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutModule)
LLVMBool LLVMGetBitcodeModuleInContext (LLVMContextRef ContextRef, LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutM, char **OutMessage)
Reads a module from the specified path, returning via the OutMP parameter a module provider which performs lazy deserialization.  More...
LLVMBool LLVMGetBitcodeModuleInContext2 (LLVMContextRef ContextRef, LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutM)
Reads a module from the specified path, returning via the OutMP parameter a module provider which performs lazy deserialization.  More...
LLVMBool LLVMGetBitcodeModule (LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutM, char **OutMessage)
LLVMBool LLVMGetBitcodeModule2 (LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutM)

Bit Writer
----------
(Functions)
int LLVMWriteBitcodeToFile (LLVMModuleRef M, const char *Path)
Writes a module to the specified path.  More...
int LLVMWriteBitcodeToFD (LLVMModuleRef M, int FD, int ShouldClose, int Unbuffered)
Writes a module to an open file descriptor.  More...
int LLVMWriteBitcodeToFileHandle (LLVMModuleRef M, int Handle)
Deprecated for LLVMWriteBitcodeToFD.  More...
LLVMMemoryBufferRef LLVMWriteBitcodeToMemoryBuffer (LLVMModuleRef M)
Writes a module to a new memory buffer and returns it.  More...

Transforms
----------
Aggressive Instruction Combining transformations
------------------------------------------------
(Functions)
void LLVMAddAggressiveInstCombinerPass (LLVMPassManagerRef PM)
See llvm::createAggressiveInstCombinerPass function.  More...

Coroutine transformations
-------------------------
(Functions)
void LLVMAddCoroEarlyPass (LLVMPassManagerRef PM)
See llvm::createCoroEarlyLegacyPass function.  More...
void LLVMAddCoroSplitPass (LLVMPassManagerRef PM)
See llvm::createCoroSplitLegacyPass function.  More...
void LLVMAddCoroElidePass (LLVMPassManagerRef PM)
See llvm::createCoroElideLegacyPass function.  More...
void LLVMAddCoroCleanupPass (LLVMPassManagerRef PM)
See llvm::createCoroCleanupLegacyPass function.  More...
void LLVMPassManagerBuilderAddCoroutinePassesToExtensionPoints (LLVMPassManagerBuilderRef PMB)
See llvm::addCoroutinePassesToExtensionPoints.  More...

Instruction Combining transformations
-------------------------------------
(Functions)
void LLVMAddInstructionCombiningPass (LLVMPassManagerRef PM)
See llvm::createInstructionCombiningPass function.  More...

Interprocedural transformations
-------------------------------
(Functions)
void LLVMAddArgumentPromotionPass (LLVMPassManagerRef PM)
See llvm::createArgumentPromotionPass function.  More...
void LLVMAddConstantMergePass (LLVMPassManagerRef PM)
See llvm::createConstantMergePass function.  More...
void LLVMAddMergeFunctionsPass (LLVMPassManagerRef PM)
See llvm::createMergeFunctionsPass function.  More...
void LLVMAddCalledValuePropagationPass (LLVMPassManagerRef PM)
See llvm::createCalledValuePropagationPass function.  More...
void LLVMAddDeadArgEliminationPass (LLVMPassManagerRef PM)
See llvm::createDeadArgEliminationPass function.  More...
void LLVMAddFunctionAttrsPass (LLVMPassManagerRef PM)
See llvm::createFunctionAttrsPass function.  More...
void LLVMAddFunctionInliningPass (LLVMPassManagerRef PM)
See llvm::createFunctionInliningPass function.  More...
void LLVMAddAlwaysInlinerPass (LLVMPassManagerRef PM)
See llvm::createAlwaysInlinerPass function.  More...
void LLVMAddGlobalDCEPass (LLVMPassManagerRef PM)
See llvm::createGlobalDCEPass function.  More...
void LLVMAddGlobalOptimizerPass (LLVMPassManagerRef PM)
See llvm::createGlobalOptimizerPass function.  More...
void LLVMAddPruneEHPass (LLVMPassManagerRef PM)
See llvm::createPruneEHPass function.  More...
void LLVMAddIPSCCPPass (LLVMPassManagerRef PM)
See llvm::createIPSCCPPass function.  More...
void LLVMAddInternalizePass (LLVMPassManagerRef, unsigned AllButMain)
See llvm::createInternalizePass function.  More...
void LLVMAddInternalizePassWithMustPreservePredicate (LLVMPassManagerRef PM, void *Context, LLVMBool(*MustPreserve)(LLVMValueRef, void *))
Create and add the internalize pass to the given pass manager with the provided preservation callback.  More...
void LLVMAddStripDeadPrototypesPass (LLVMPassManagerRef PM)
See llvm::createStripDeadPrototypesPass function.  More...
void LLVMAddStripSymbolsPass (LLVMPassManagerRef PM)
See llvm::createStripSymbolsPass function.  More...

Pass manager builder
--------------------
(Functions)
LLVMPassManagerBuilderRef LLVMPassManagerBuilderCreate (void)
See llvm::PassManagerBuilder.  More...
void LLVMPassManagerBuilderDispose (LLVMPassManagerBuilderRef PMB)
void LLVMPassManagerBuilderSetOptLevel (LLVMPassManagerBuilderRef PMB, unsigned OptLevel)
See llvm::PassManagerBuilder::OptLevel.  More...
void LLVMPassManagerBuilderSetSizeLevel (LLVMPassManagerBuilderRef PMB, unsigned SizeLevel)
See llvm::PassManagerBuilder::SizeLevel.  More...
void LLVMPassManagerBuilderSetDisableUnitAtATime (LLVMPassManagerBuilderRef PMB, LLVMBool Value)
See llvm::PassManagerBuilder::DisableUnitAtATime.  More...
void LLVMPassManagerBuilderSetDisableUnrollLoops (LLVMPassManagerBuilderRef PMB, LLVMBool Value)
See llvm::PassManagerBuilder::DisableUnrollLoops.  More...
void LLVMPassManagerBuilderSetDisableSimplifyLibCalls (LLVMPassManagerBuilderRef PMB, LLVMBool Value)
See llvm::PassManagerBuilder::DisableSimplifyLibCalls.  More...
void LLVMPassManagerBuilderUseInlinerWithThreshold (LLVMPassManagerBuilderRef PMB, unsigned Threshold)
See llvm::PassManagerBuilder::Inliner.  More...
void LLVMPassManagerBuilderPopulateFunctionPassManager (LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM)
See llvm::PassManagerBuilder::populateFunctionPassManager.  More...
void LLVMPassManagerBuilderPopulateModulePassManager (LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM)
See llvm::PassManagerBuilder::populateModulePassManager.  More...
void LLVMPassManagerBuilderPopulateLTOPassManager (LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM, LLVMBool Internalize, LLVMBool RunInliner)
See llvm::PassManagerBuilder::populateLTOPassManager.  More...

Scalar transformations
----------------------
(Functions)
void LLVMAddAggressiveDCEPass (LLVMPassManagerRef PM)
See llvm::createAggressiveDCEPass function.  More...
void LLVMAddDCEPass (LLVMPassManagerRef PM)
See llvm::createDeadCodeEliminationPass function.  More...
void LLVMAddBitTrackingDCEPass (LLVMPassManagerRef PM)
See llvm::createBitTrackingDCEPass function.  More...
void LLVMAddAlignmentFromAssumptionsPass (LLVMPassManagerRef PM)
See llvm::createAlignmentFromAssumptionsPass function.  More...
void LLVMAddCFGSimplificationPass (LLVMPassManagerRef PM)
See llvm::createCFGSimplificationPass function.  More...
void LLVMAddDeadStoreEliminationPass (LLVMPassManagerRef PM)
See llvm::createDeadStoreEliminationPass function.  More...
void LLVMAddScalarizerPass (LLVMPassManagerRef PM)
See llvm::createScalarizerPass function.  More...
void LLVMAddMergedLoadStoreMotionPass (LLVMPassManagerRef PM)
See llvm::createMergedLoadStoreMotionPass function.  More...
void LLVMAddGVNPass (LLVMPassManagerRef PM)
See llvm::createGVNPass function.  More...
void LLVMAddNewGVNPass (LLVMPassManagerRef PM)
See llvm::createGVNPass function.  More...
void LLVMAddIndVarSimplifyPass (LLVMPassManagerRef PM)
See llvm::createIndVarSimplifyPass function.  More...
void LLVMAddInstructionCombiningPass (LLVMPassManagerRef PM)
See llvm::createInstructionCombiningPass function.  More...
void LLVMAddInstructionSimplifyPass (LLVMPassManagerRef PM)
See llvm::createInstSimplifyLegacyPass function.  More...
void LLVMAddJumpThreadingPass (LLVMPassManagerRef PM)
See llvm::createJumpThreadingPass function.  More...
void LLVMAddLICMPass (LLVMPassManagerRef PM)
See llvm::createLICMPass function.  More...
void LLVMAddLoopDeletionPass (LLVMPassManagerRef PM)
See llvm::createLoopDeletionPass function.  More...
void LLVMAddLoopIdiomPass (LLVMPassManagerRef PM)
See llvm::createLoopIdiomPass function.  More...
void LLVMAddLoopRotatePass (LLVMPassManagerRef PM)
See llvm::createLoopRotatePass function.  More...
void LLVMAddLoopRerollPass (LLVMPassManagerRef PM)
See llvm::createLoopRerollPass function.  More...
void LLVMAddLoopUnrollPass (LLVMPassManagerRef PM)
See llvm::createLoopUnrollPass function.  More...
void LLVMAddLoopUnrollAndJamPass (LLVMPassManagerRef PM)
See llvm::createLoopUnrollAndJamPass function.  More...
void LLVMAddLoopUnswitchPass (LLVMPassManagerRef PM)
See llvm::createLoopUnswitchPass function.  More...
void LLVMAddLowerAtomicPass (LLVMPassManagerRef PM)
See llvm::createLowerAtomicPass function.  More...
void LLVMAddMemCpyOptPass (LLVMPassManagerRef PM)
See llvm::createMemCpyOptPass function.  More...
void LLVMAddPartiallyInlineLibCallsPass (LLVMPassManagerRef PM)
See llvm::createPartiallyInlineLibCallsPass function.  More...
void LLVMAddReassociatePass (LLVMPassManagerRef PM)
See llvm::createReassociatePass function.  More...
void LLVMAddSCCPPass (LLVMPassManagerRef PM)
See llvm::createSCCPPass function.  More...
void LLVMAddScalarReplAggregatesPass (LLVMPassManagerRef PM)
See llvm::createSROAPass function.  More...
void LLVMAddScalarReplAggregatesPassSSA (LLVMPassManagerRef PM)
See llvm::createSROAPass function.  More...
void LLVMAddScalarReplAggregatesPassWithThreshold (LLVMPassManagerRef PM, int Threshold)
See llvm::createSROAPass function.  More...
void LLVMAddSimplifyLibCallsPass (LLVMPassManagerRef PM)
See llvm::createSimplifyLibCallsPass function.  More...
void LLVMAddTailCallEliminationPass (LLVMPassManagerRef PM)
See llvm::createTailCallEliminationPass function.  More...
void LLVMAddDemoteMemoryToRegisterPass (LLVMPassManagerRef PM)
See llvm::demotePromoteMemoryToRegisterPass function.  More...
void LLVMAddVerifierPass (LLVMPassManagerRef PM)
See llvm::createVerifierPass function.  More...
void LLVMAddCorrelatedValuePropagationPass (LLVMPassManagerRef PM)
See llvm::createCorrelatedValuePropagationPass function.  More...
void LLVMAddEarlyCSEPass (LLVMPassManagerRef PM)
See llvm::createEarlyCSEPass function.  More...
void LLVMAddEarlyCSEMemSSAPass (LLVMPassManagerRef PM)
See llvm::createEarlyCSEPass function.  More...
void LLVMAddLowerExpectIntrinsicPass (LLVMPassManagerRef PM)
See llvm::createLowerExpectIntrinsicPass function.  More...
void LLVMAddLowerConstantIntrinsicsPass (LLVMPassManagerRef PM)
See llvm::createLowerConstantIntrinsicsPass function.  More...
void LLVMAddTypeBasedAliasAnalysisPass (LLVMPassManagerRef PM)
See llvm::createTypeBasedAliasAnalysisPass function.  More...
void LLVMAddScopedNoAliasAAPass (LLVMPassManagerRef PM)
See llvm::createScopedNoAliasAAPass function.  More...
void LLVMAddBasicAliasAnalysisPass (LLVMPassManagerRef PM)
See llvm::createBasicAliasAnalysisPass function.  More...
void LLVMAddUnifyFunctionExitNodesPass (LLVMPassManagerRef PM)
See llvm::createUnifyFunctionExitNodesPass function.  More...

Transformation Utilities
------------------------
(Functions)
void LLVMAddLowerSwitchPass (LLVMPassManagerRef PM)
See llvm::createLowerSwitchPass function.  More...
void LLVMAddPromoteMemoryToRegisterPass (LLVMPassManagerRef PM)
See llvm::createPromoteMemoryToRegisterPass function.  More...
void LLVMAddAddDiscriminatorsPass (LLVMPassManagerRef PM)
See llvm::createAddDiscriminatorsPass function.  More...

Vectorization transformations
-----------------------------
(Functions)
void LLVMAddLoopVectorizePass (LLVMPassManagerRef PM)
See llvm::createLoopVectorizePass function.  More...
void LLVMAddSLPVectorizePass (LLVMPassManagerRef PM)
See llvm::createSLPVectorizerPass function.  More...


Core
----
Comdats
-------
(Functions)
LLVMComdatRef LLVMGetOrInsertComdat (LLVMModuleRef M, const char *Name)
Return the Comdat in the module with the specified name.  More...
LLVMComdatRef LLVMGetComdat (LLVMValueRef V)
Get the Comdat assigned to the given global object.  More...
void LLVMSetComdat (LLVMValueRef V, LLVMComdatRef C)
Assign the Comdat to the given global object.  More...
LLVMComdatSelectionKind LLVMGetComdatSelectionKind (LLVMComdatRef C)
void LLVMSetComdatSelectionKind (LLVMComdatRef C, LLVMComdatSelectionKind Kind)

Types and Enumerations
----------------------

Contexts
--------
(Functions)
LLVMContextRef LLVMContextCreate (void)
Create a new context.  More...
LLVMContextRef LLVMGetGlobalContext (void)
Obtain the global context instance.  More...
void LLVMContextSetDiagnosticHandler (LLVMContextRef C, LLVMDiagnosticHandler Handler, void *DiagnosticContext)
Set the diagnostic handler for this context.  More...
LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler (LLVMContextRef C)
Get the diagnostic handler of this context.  More...
void * LLVMContextGetDiagnosticContext (LLVMContextRef C)
Get the diagnostic context of this context.  More...
void LLVMContextSetYieldCallback (LLVMContextRef C, LLVMYieldCallback Callback, void *OpaqueHandle)
Set the yield callback function for this context.  More...
LLVMBool LLVMContextShouldDiscardValueNames (LLVMContextRef C)
Retrieve whether the given context is set to discard all value names.  More...
void LLVMContextSetDiscardValueNames (LLVMContextRef C, LLVMBool Discard)
Set whether the given context discards all value names.  More...
void LLVMContextDispose (LLVMContextRef C)
Destroy a context instance.  More...
char * LLVMGetDiagInfoDescription (LLVMDiagnosticInfoRef DI)
Return a string representation of the DiagnosticInfo.  More...
LLVMDiagnosticSeverity LLVMGetDiagInfoSeverity (LLVMDiagnosticInfoRef DI)
Return an enum LLVMDiagnosticSeverity.  More...
unsigned LLVMGetMDKindIDInContext (LLVMContextRef C, const char *Name, unsigned SLen)
unsigned LLVMGetMDKindID (const char *Name, unsigned SLen)
unsigned LLVMGetEnumAttributeKindForName (const char *Name, size_t SLen)
Return an unique id given the name of a enum attribute, or 0 if no attribute by that name exists.  More...
unsigned LLVMGetLastEnumAttributeKind (void)
LLVMAttributeRef LLVMCreateEnumAttribute (LLVMContextRef C, unsigned KindID, uint64_t Val)
Create an enum attribute.  More...
unsigned LLVMGetEnumAttributeKind (LLVMAttributeRef A)
Get the unique id corresponding to the enum attribute passed as argument.  More...
uint64_t LLVMGetEnumAttributeValue (LLVMAttributeRef A)
Get the enum attribute's value.  More...
LLVMAttributeRef LLVMCreateTypeAttribute (LLVMContextRef C, unsigned KindID, LLVMTypeRef type_ref)
Create a type attribute.  More...
LLVMTypeRef LLVMGetTypeAttributeValue (LLVMAttributeRef A)
Get the type attribute's value.  More...
LLVMAttributeRef LLVMCreateStringAttribute (LLVMContextRef C, const char *K, unsigned KLength, const char *V, unsigned VLength)
Create a string attribute.  More...
const char * LLVMGetStringAttributeKind (LLVMAttributeRef A, unsigned *Length)
Get the string attribute's kind.  More...
const char * LLVMGetStringAttributeValue (LLVMAttributeRef A, unsigned *Length)
Get the string attribute's value.  More...
LLVMBool LLVMIsEnumAttribute (LLVMAttributeRef A)
Check for the different types of attributes.  More...
LLVMBool LLVMIsStringAttribute (LLVMAttributeRef A)
LLVMBool LLVMIsTypeAttribute (LLVMAttributeRef A)
LLVMTypeRef LLVMGetTypeByName2 (LLVMContextRef C, const char *Name)
Obtain a Type from a context by its registered name.  More...

Modules
-------
(Functions)
LLVMModuleRef LLVMModuleCreateWithName (const char *ModuleID)
Create a new, empty module in the global context.  More...
LLVMModuleRef LLVMModuleCreateWithNameInContext (const char *ModuleID, LLVMContextRef C)
Create a new, empty module in a specific context.  More...
LLVMModuleRef LLVMCloneModule (LLVMModuleRef M)
Return an exact copy of the specified module.  More...
void LLVMDisposeModule (LLVMModuleRef M)
Destroy a module instance.  More...
const char * LLVMGetModuleIdentifier (LLVMModuleRef M, size_t *Len)
Obtain the identifier of a module.  More...
void LLVMSetModuleIdentifier (LLVMModuleRef M, const char *Ident, size_t Len)
Set the identifier of a module to a string Ident with length Len.  More...
const char * LLVMGetSourceFileName (LLVMModuleRef M, size_t *Len)
Obtain the module's original source file name.  More...
void LLVMSetSourceFileName (LLVMModuleRef M, const char *Name, size_t Len)
Set the original source file name of a module to a string Name with length Len.  More...
const char * LLVMGetDataLayoutStr (LLVMModuleRef M)
Obtain the data layout for a module.  More...
const char * LLVMGetDataLayout (LLVMModuleRef M)
void LLVMSetDataLayout (LLVMModuleRef M, const char *DataLayoutStr)
Set the data layout for a module.  More...
const char * LLVMGetTarget (LLVMModuleRef M)
Obtain the target triple for a module.  More...
void LLVMSetTarget (LLVMModuleRef M, const char *Triple)
Set the target triple for a module.  More...
LLVMModuleFlagEntry * LLVMCopyModuleFlagsMetadata (LLVMModuleRef M, size_t *Len)
Returns the module flags as an array of flag-key-value triples.  More...
void LLVMDisposeModuleFlagsMetadata (LLVMModuleFlagEntry *Entries)
Destroys module flags metadata entries.  More...
LLVMModuleFlagBehavior LLVMModuleFlagEntriesGetFlagBehavior (LLVMModuleFlagEntry *Entries, unsigned Index)
Returns the flag behavior for a module flag entry at a specific index.  More...
const char * LLVMModuleFlagEntriesGetKey (LLVMModuleFlagEntry *Entries, unsigned Index, size_t *Len)
Returns the key for a module flag entry at a specific index.  More...
LLVMMetadataRef LLVMModuleFlagEntriesGetMetadata (LLVMModuleFlagEntry *Entries, unsigned Index)
Returns the metadata for a module flag entry at a specific index.  More...
LLVMMetadataRef LLVMGetModuleFlag (LLVMModuleRef M, const char *Key, size_t KeyLen)
Add a module-level flag to the module-level flags metadata if it doesn't already exist.  More...
void LLVMAddModuleFlag (LLVMModuleRef M, LLVMModuleFlagBehavior Behavior, const char *Key, size_t KeyLen, LLVMMetadataRef Val)
Add a module-level flag to the module-level flags metadata if it doesn't already exist.  More...
void LLVMDumpModule (LLVMModuleRef M)
Dump a representation of a module to stderr.  More...
LLVMBool LLVMPrintModuleToFile (LLVMModuleRef M, const char *Filename, char **ErrorMessage)
Print a representation of a module to a file.  More...
char * LLVMPrintModuleToString (LLVMModuleRef M)
Return a string representation of the module.  More...
const char * LLVMGetModuleInlineAsm (LLVMModuleRef M, size_t *Len)
Get inline assembly for a module.  More...
void LLVMSetModuleInlineAsm2 (LLVMModuleRef M, const char *Asm, size_t Len)
Set inline assembly for a module.  More...
void LLVMAppendModuleInlineAsm (LLVMModuleRef M, const char *Asm, size_t Len)
Append inline assembly to a module.  More...
LLVMValueRef LLVMGetInlineAsm (LLVMTypeRef Ty, char *AsmString, size_t AsmStringSize, char *Constraints, size_t ConstraintsSize, LLVMBool HasSideEffects, LLVMBool IsAlignStack, LLVMInlineAsmDialect Dialect, LLVMBool CanThrow)
Create the specified uniqued inline asm string.  More...
LLVMContextRef LLVMGetModuleContext (LLVMModuleRef M)
Obtain the context to which this module is associated.  More...
LLVMTypeRef LLVMGetTypeByName (LLVMModuleRef M, const char *Name)
Deprecated: Use LLVMGetTypeByName2 instead.  More...
LLVMNamedMDNodeRef LLVMGetFirstNamedMetadata (LLVMModuleRef M)
Obtain an iterator to the first NamedMDNode in a Module.  More...
LLVMNamedMDNodeRef LLVMGetLastNamedMetadata (LLVMModuleRef M)
Obtain an iterator to the last NamedMDNode in a Module.  More...
LLVMNamedMDNodeRef LLVMGetNextNamedMetadata (LLVMNamedMDNodeRef NamedMDNode)
Advance a NamedMDNode iterator to the next NamedMDNode.  More...
LLVMNamedMDNodeRef LLVMGetPreviousNamedMetadata (LLVMNamedMDNodeRef NamedMDNode)
Decrement a NamedMDNode iterator to the previous NamedMDNode.  More...
LLVMNamedMDNodeRef LLVMGetNamedMetadata (LLVMModuleRef M, const char *Name, size_t NameLen)
Retrieve a NamedMDNode with the given name, returning NULL if no such node exists.  More...
LLVMNamedMDNodeRef LLVMGetOrInsertNamedMetadata (LLVMModuleRef M, const char *Name, size_t NameLen)
Retrieve a NamedMDNode with the given name, creating a new node if no such node exists.  More...
const char * LLVMGetNamedMetadataName (LLVMNamedMDNodeRef NamedMD, size_t *NameLen)
Retrieve the name of a NamedMDNode.  More...
unsigned LLVMGetNamedMetadataNumOperands (LLVMModuleRef M, const char *Name)
Obtain the number of operands for named metadata in a module.  More...
void LLVMGetNamedMetadataOperands (LLVMModuleRef M, const char *Name, LLVMValueRef *Dest)
Obtain the named metadata operands for a module.  More...
void LLVMAddNamedMetadataOperand (LLVMModuleRef M, const char *Name, LLVMValueRef Val)
Add an operand to named metadata.  More...
const char * LLVMGetDebugLocDirectory (LLVMValueRef Val, unsigned *Length)
Return the directory of the debug location for this value, which must be an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.  More...
const char * LLVMGetDebugLocFilename (LLVMValueRef Val, unsigned *Length)
Return the filename of the debug location for this value, which must be an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.  More...
unsigned LLVMGetDebugLocLine (LLVMValueRef Val)
Return the line number of the debug location for this value, which must be an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.  More...
unsigned LLVMGetDebugLocColumn (LLVMValueRef Val)
Return the column number of the debug location for this value, which must be an llvm::Instruction.  More...
LLVMValueRef LLVMAddFunction (LLVMModuleRef M, const char *Name, LLVMTypeRef FunctionTy)
Add a function to a module under a specified name.  More...
LLVMValueRef LLVMGetNamedFunction (LLVMModuleRef M, const char *Name)
Obtain a Function value from a Module by its name.  More...
LLVMValueRef LLVMGetFirstFunction (LLVMModuleRef M)
Obtain an iterator to the first Function in a Module.  More...
LLVMValueRef LLVMGetLastFunction (LLVMModuleRef M)
Obtain an iterator to the last Function in a Module.  More...
LLVMValueRef LLVMGetNextFunction (LLVMValueRef Fn)
Advance a Function iterator to the next Function.  More...
LLVMValueRef LLVMGetPreviousFunction (LLVMValueRef Fn)
Decrement a Function iterator to the previous Function.  More...
void LLVMSetModuleInlineAsm (LLVMModuleRef M, const char *Asm)
Deprecated: Use LLVMSetModuleInlineAsm2 instead.  More...

Types
-----
Integer Types
-------------
(Functions)
LLVMTypeRef LLVMInt1TypeInContext (LLVMContextRef C)
Obtain an integer type from a context with specified bit width.  More...
LLVMTypeRef LLVMInt8TypeInContext (LLVMContextRef C)
LLVMTypeRef LLVMInt16TypeInContext (LLVMContextRef C)
LLVMTypeRef LLVMInt32TypeInContext (LLVMContextRef C)
LLVMTypeRef LLVMInt64TypeInContext (LLVMContextRef C)
LLVMTypeRef LLVMInt128TypeInContext (LLVMContextRef C)
LLVMTypeRef LLVMIntTypeInContext (LLVMContextRef C, unsigned NumBits)
LLVMTypeRef LLVMInt1Type (void)
Obtain an integer type from the global context with a specified bit width.  More...
LLVMTypeRef LLVMInt8Type (void)
LLVMTypeRef LLVMInt16Type (void)
LLVMTypeRef LLVMInt32Type (void)
LLVMTypeRef LLVMInt64Type (void)
LLVMTypeRef LLVMInt128Type (void)
LLVMTypeRef LLVMIntType (unsigned NumBits)
unsigned LLVMGetIntTypeWidth (LLVMTypeRef IntegerTy)

Floating Point Types
--------------------
(Functions)
LLVMTypeRef LLVMHalfTypeInContext (LLVMContextRef C)
Obtain a 16-bit floating point type from a context.  More...
LLVMTypeRef LLVMBFloatTypeInContext (LLVMContextRef C)
Obtain a 16-bit brain floating point type from a context.  More...
LLVMTypeRef LLVMFloatTypeInContext (LLVMContextRef C)
Obtain a 32-bit floating point type from a context.  More...
LLVMTypeRef LLVMDoubleTypeInContext (LLVMContextRef C)
Obtain a 64-bit floating point type from a context.  More...
LLVMTypeRef LLVMX86FP80TypeInContext (LLVMContextRef C)
Obtain a 80-bit floating point type (X87) from a context.  More...
LLVMTypeRef LLVMFP128TypeInContext (LLVMContextRef C)
Obtain a 128-bit floating point type (112-bit mantissa) from a context.  More...
LLVMTypeRef LLVMPPCFP128TypeInContext (LLVMContextRef C)
Obtain a 128-bit floating point type (two 64-bits) from a context.  More...
LLVMTypeRef LLVMHalfType (void)
Obtain a floating point type from the global context.  More...
LLVMTypeRef LLVMBFloatType (void)
LLVMTypeRef LLVMFloatType (void)
LLVMTypeRef LLVMDoubleType (void)
LLVMTypeRef LLVMX86FP80Type (void)
LLVMTypeRef LLVMFP128Type (void)
LLVMTypeRef LLVMPPCFP128Type (void)

Function Types
--------------
(Functions)
LLVMTypeRef LLVMFunctionType (LLVMTypeRef ReturnType, LLVMTypeRef *ParamTypes, unsigned ParamCount, LLVMBool IsVarArg)
Obtain a function type consisting of a specified signature.  More...
LLVMBool LLVMIsFunctionVarArg (LLVMTypeRef FunctionTy)
Returns whether a function type is variadic.  More...
LLVMTypeRef LLVMGetReturnType (LLVMTypeRef FunctionTy)
Obtain the Type this function Type returns.  More...
unsigned LLVMCountParamTypes (LLVMTypeRef FunctionTy)
Obtain the number of parameters this function accepts.  More...
void LLVMGetParamTypes (LLVMTypeRef FunctionTy, LLVMTypeRef *Dest)
Obtain the types of a function's parameters.  More...

Structure Types
---------------
(Functions)
LLVMTypeRef LLVMStructTypeInContext (LLVMContextRef C, LLVMTypeRef *ElementTypes, unsigned ElementCount, LLVMBool Packed)
Create a new structure type in a context.  More...
LLVMTypeRef LLVMStructType (LLVMTypeRef *ElementTypes, unsigned ElementCount, LLVMBool Packed)
Create a new structure type in the global context.  More...
LLVMTypeRef LLVMStructCreateNamed (LLVMContextRef C, const char *Name)
Create an empty structure in a context having a specified name.  More...
const char * LLVMGetStructName (LLVMTypeRef Ty)
Obtain the name of a structure.  More...
void LLVMStructSetBody (LLVMTypeRef StructTy, LLVMTypeRef *ElementTypes, unsigned ElementCount, LLVMBool Packed)
Set the contents of a structure type.  More...
unsigned LLVMCountStructElementTypes (LLVMTypeRef StructTy)
Get the number of elements defined inside the structure.  More...
void LLVMGetStructElementTypes (LLVMTypeRef StructTy, LLVMTypeRef *Dest)
Get the elements within a structure.  More...
LLVMTypeRef LLVMStructGetTypeAtIndex (LLVMTypeRef StructTy, unsigned i)
Get the type of the element at a given index in the structure.  More...
LLVMBool LLVMIsPackedStruct (LLVMTypeRef StructTy)
Determine whether a structure is packed.  More...
LLVMBool LLVMIsOpaqueStruct (LLVMTypeRef StructTy)
Determine whether a structure is opaque.  More...
LLVMBool LLVMIsLiteralStruct (LLVMTypeRef StructTy)
Determine whether a structure is literal.  More...

Sequential Types
----------------
(Functions)
LLVMTypeRef LLVMGetElementType (LLVMTypeRef Ty)
Obtain the type of elements within a sequential type.  More...
void LLVMGetSubtypes (LLVMTypeRef Tp, LLVMTypeRef *Arr)
Returns type's subtypes.  More...
unsigned LLVMGetNumContainedTypes (LLVMTypeRef Tp)
Return the number of types in the derived type.  More...
LLVMTypeRef LLVMArrayType (LLVMTypeRef ElementType, unsigned ElementCount)
Create a fixed size array type that refers to a specific type.  More...
unsigned LLVMGetArrayLength (LLVMTypeRef ArrayTy)
Obtain the length of an array type.  More...
LLVMTypeRef LLVMPointerType (LLVMTypeRef ElementType, unsigned AddressSpace)
Create a pointer type that points to a defined type.  More...
unsigned LLVMGetPointerAddressSpace (LLVMTypeRef PointerTy)
Obtain the address space of a pointer type.  More...
LLVMTypeRef LLVMVectorType (LLVMTypeRef ElementType, unsigned ElementCount)
Create a vector type that contains a defined type and has a specific number of elements.  More...
LLVMTypeRef LLVMScalableVectorType (LLVMTypeRef ElementType, unsigned ElementCount)
Create a vector type that contains a defined type and has a scalable number of elements.  More...
unsigned LLVMGetVectorSize (LLVMTypeRef VectorTy)
Obtain the (possibly scalable) number of elements in a vector type.  More...

Other Types
-----------
(Functions)
LLVMTypeRef LLVMVoidTypeInContext (LLVMContextRef C)
Create a void type in a context.  More...
LLVMTypeRef LLVMLabelTypeInContext (LLVMContextRef C)
Create a label type in a context.  More...
LLVMTypeRef LLVMX86MMXTypeInContext (LLVMContextRef C)
Create a X86 MMX type in a context.  More...
LLVMTypeRef LLVMX86AMXTypeInContext (LLVMContextRef C)
Create a X86 AMX type in a context.  More...
LLVMTypeRef LLVMTokenTypeInContext (LLVMContextRef C)
Create a token type in a context.  More...
LLVMTypeRef LLVMMetadataTypeInContext (LLVMContextRef C)
Create a metadata type in a context.  More...
LLVMTypeRef LLVMVoidType (void)
These are similar to the above functions except they operate on the global context.  More...
LLVMTypeRef LLVMLabelType (void)
LLVMTypeRef LLVMX86MMXType (void)
LLVMTypeRef LLVMX86AMXType (void)

(Functions)
LLVMTypeKind LLVMGetTypeKind (LLVMTypeRef Ty)
Obtain the enumerated type of a Type instance.  More...
LLVMBool LLVMTypeIsSized (LLVMTypeRef Ty)
Whether the type has a known size.  More...
LLVMContextRef LLVMGetTypeContext (LLVMTypeRef Ty)
Obtain the context to which this type instance is associated.  More...
void LLVMDumpType (LLVMTypeRef Val)
Dump a representation of a type to stderr.  More...
char * LLVMPrintTypeToString (LLVMTypeRef Val)
Return a string representation of the type.  More...

Values
------
General APIs
------------
(Functions)
LLVMTypeRef LLVMTypeOf (LLVMValueRef Val)
Obtain the type of a value.  More...
LLVMValueKind LLVMGetValueKind (LLVMValueRef Val)
Obtain the enumerated type of a Value instance.  More...
const char * LLVMGetValueName2 (LLVMValueRef Val, size_t *Length)
Obtain the string name of a value.  More...
void LLVMSetValueName2 (LLVMValueRef Val, const char *Name, size_t NameLen)
Set the string name of a value.  More...
void LLVMDumpValue (LLVMValueRef Val)
Dump a representation of a value to stderr.  More...
char * LLVMPrintValueToString (LLVMValueRef Val)
Return a string representation of the value.  More...
void LLVMReplaceAllUsesWith (LLVMValueRef OldVal, LLVMValueRef NewVal)
Replace all uses of a value with another one.  More...
LLVMBool LLVMIsConstant (LLVMValueRef Val)
Determine whether the specified value instance is constant.  More...
LLVMBool LLVMIsUndef (LLVMValueRef Val)
Determine whether a value instance is undefined.  More...
LLVMBool LLVMIsPoison (LLVMValueRef Val)
Determine whether a value instance is poisonous.  More...
LLVMValueRef LLVMIsAMDNode (LLVMValueRef Val)
LLVMValueRef LLVMIsAMDString (LLVMValueRef Val)
const char * LLVMGetValueName (LLVMValueRef Val)
Deprecated: Use LLVMGetValueName2 instead.  More...
void LLVMSetValueName (LLVMValueRef Val, const char *Name)
Deprecated: Use LLVMSetValueName2 instead.  More...

Usage
-----
(Functions)
LLVMUseRef LLVMGetFirstUse (LLVMValueRef Val)
Obtain the first use of a value.  More...
LLVMUseRef LLVMGetNextUse (LLVMUseRef U)
Obtain the next use of a value.  More...
LLVMValueRef LLVMGetUser (LLVMUseRef U)
Obtain the user value for a user.  More...
LLVMValueRef LLVMGetUsedValue (LLVMUseRef U)
Obtain the value this use corresponds to.  More...

User value
----------
(Functions)
LLVMValueRef LLVMGetOperand (LLVMValueRef Val, unsigned Index)
Obtain an operand at a specific index in a llvm::User value.  More...
LLVMUseRef LLVMGetOperandUse (LLVMValueRef Val, unsigned Index)
Obtain the use of an operand at a specific index in a llvm::User value.  More...
void LLVMSetOperand (LLVMValueRef User, unsigned Index, LLVMValueRef Val)
Set an operand at a specific index in a llvm::User value.  More...
int LLVMGetNumOperands (LLVMValueRef Val)
Obtain the number of operands in a llvm::User value.  More...

Constants
---------
Scalar constants
----------------
(Functions)
LLVMValueRef LLVMConstInt (LLVMTypeRef IntTy, unsigned long long N, LLVMBool SignExtend)
Obtain a constant value for an integer type.  More...
LLVMValueRef LLVMConstIntOfArbitraryPrecision (LLVMTypeRef IntTy, unsigned NumWords, const uint64_t Words[])
Obtain a constant value for an integer of arbitrary precision.  More...
LLVMValueRef LLVMConstIntOfString (LLVMTypeRef IntTy, const char *Text, uint8_t Radix)
Obtain a constant value for an integer parsed from a string.  More...
LLVMValueRef LLVMConstIntOfStringAndSize (LLVMTypeRef IntTy, const char *Text, unsigned SLen, uint8_t Radix)
Obtain a constant value for an integer parsed from a string with specified length.  More...
LLVMValueRef LLVMConstReal (LLVMTypeRef RealTy, double N)
Obtain a constant value referring to a double floating point value.  More...
LLVMValueRef LLVMConstRealOfString (LLVMTypeRef RealTy, const char *Text)
Obtain a constant for a floating point value parsed from a string.  More...
LLVMValueRef LLVMConstRealOfStringAndSize (LLVMTypeRef RealTy, const char *Text, unsigned SLen)
Obtain a constant for a floating point value parsed from a string.  More...
unsigned long long LLVMConstIntGetZExtValue (LLVMValueRef ConstantVal)
Obtain the zero extended value for an integer constant value.  More...
long long LLVMConstIntGetSExtValue (LLVMValueRef ConstantVal)
Obtain the sign extended value for an integer constant value.  More...
double LLVMConstRealGetDouble (LLVMValueRef ConstantVal, LLVMBool *losesInfo)
Obtain the double value for an floating point constant value.  More...

Composite Constants
-------------------
(Functions)
LLVMValueRef LLVMConstStringInContext (LLVMContextRef C, const char *Str, unsigned Length, LLVMBool DontNullTerminate)
Create a ConstantDataSequential and initialize it with a string.  More...
LLVMValueRef LLVMConstString (const char *Str, unsigned Length, LLVMBool DontNullTerminate)
Create a ConstantDataSequential with string content in the global context.  More...
LLVMBool LLVMIsConstantString (LLVMValueRef c)
Returns true if the specified constant is an array of i8.  More...
const char * LLVMGetAsString (LLVMValueRef c, size_t *Length)
Get the given constant data sequential as a string.  More...
LLVMValueRef LLVMConstStructInContext (LLVMContextRef C, LLVMValueRef *ConstantVals, unsigned Count, LLVMBool Packed)
Create an anonymous ConstantStruct with the specified values.  More...
LLVMValueRef LLVMConstStruct (LLVMValueRef *ConstantVals, unsigned Count, LLVMBool Packed)
Create a ConstantStruct in the global Context.  More...
LLVMValueRef LLVMConstArray (LLVMTypeRef ElementTy, LLVMValueRef *ConstantVals, unsigned Length)
Create a ConstantArray from values.  More...
LLVMValueRef LLVMConstNamedStruct (LLVMTypeRef StructTy, LLVMValueRef *ConstantVals, unsigned Count)
Create a non-anonymous ConstantStruct from values.  More...
LLVMValueRef LLVMGetElementAsConstant (LLVMValueRef C, unsigned idx)
Get an element at specified index as a constant.  More...
LLVMValueRef LLVMConstVector (LLVMValueRef *ScalarConstantVals, unsigned Size)
Create a ConstantVector from values.  More...

Constant Expressions
--------------------
(Functions)
LLVMOpcode LLVMGetConstOpcode (LLVMValueRef ConstantVal)
LLVMValueRef LLVMAlignOf (LLVMTypeRef Ty)
LLVMValueRef LLVMSizeOf (LLVMTypeRef Ty)
LLVMValueRef LLVMConstNeg (LLVMValueRef ConstantVal)
LLVMValueRef LLVMConstNSWNeg (LLVMValueRef ConstantVal)
LLVMValueRef LLVMConstNUWNeg (LLVMValueRef ConstantVal)
LLVMValueRef LLVMConstFNeg (LLVMValueRef ConstantVal)
LLVMValueRef LLVMConstNot (LLVMValueRef ConstantVal)
LLVMValueRef LLVMConstAdd (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstNSWAdd (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstNUWAdd (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstFAdd (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstSub (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstNSWSub (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstNUWSub (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstFSub (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstMul (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstNSWMul (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstNUWMul (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstFMul (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstUDiv (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstExactUDiv (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstSDiv (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstExactSDiv (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstFDiv (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstURem (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstSRem (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstFRem (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstAnd (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstOr (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstXor (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstICmp (LLVMIntPredicate Predicate, LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstFCmp (LLVMRealPredicate Predicate, LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstShl (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstLShr (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstAShr (LLVMValueRef LHSConstant, LLVMValueRef RHSConstant)
LLVMValueRef LLVMConstGEP (LLVMValueRef ConstantVal, LLVMValueRef *ConstantIndices, unsigned NumIndices)
LLVMValueRef LLVMConstGEP2 (LLVMTypeRef Ty, LLVMValueRef ConstantVal, LLVMValueRef *ConstantIndices, unsigned NumIndices)
LLVMValueRef LLVMConstInBoundsGEP (LLVMValueRef ConstantVal, LLVMValueRef *ConstantIndices, unsigned NumIndices)
LLVMValueRef LLVMConstInBoundsGEP2 (LLVMTypeRef Ty, LLVMValueRef ConstantVal, LLVMValueRef *ConstantIndices, unsigned NumIndices)
LLVMValueRef LLVMConstTrunc (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstSExt (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstZExt (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstFPTrunc (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstFPExt (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstUIToFP (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstSIToFP (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstFPToUI (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstFPToSI (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstPtrToInt (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstIntToPtr (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstBitCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstAddrSpaceCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstZExtOrBitCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstSExtOrBitCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstTruncOrBitCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstPointerCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstIntCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType, LLVMBool isSigned)
LLVMValueRef LLVMConstFPCast (LLVMValueRef ConstantVal, LLVMTypeRef ToType)
LLVMValueRef LLVMConstSelect (LLVMValueRef ConstantCondition, LLVMValueRef ConstantIfTrue, LLVMValueRef ConstantIfFalse)
LLVMValueRef LLVMConstExtractElement (LLVMValueRef VectorConstant, LLVMValueRef IndexConstant)
LLVMValueRef LLVMConstInsertElement (LLVMValueRef VectorConstant, LLVMValueRef ElementValueConstant, LLVMValueRef IndexConstant)
LLVMValueRef LLVMConstShuffleVector (LLVMValueRef VectorAConstant, LLVMValueRef VectorBConstant, LLVMValueRef MaskConstant)
LLVMValueRef LLVMConstExtractValue (LLVMValueRef AggConstant, unsigned *IdxList, unsigned NumIdx)
LLVMValueRef LLVMConstInsertValue (LLVMValueRef AggConstant, LLVMValueRef ElementValueConstant, unsigned *IdxList, unsigned NumIdx)
LLVMValueRef LLVMBlockAddress (LLVMValueRef F, LLVMBasicBlockRef BB)
LLVMValueRef LLVMConstInlineAsm (LLVMTypeRef Ty, const char *AsmString, const char *Constraints, LLVMBool HasSideEffects, LLVMBool IsAlignStack)
Deprecated: Use LLVMGetInlineAsm instead.  More...

Global Values
-------------
Values with alignment
---------------------

(Functions)
LLVMModuleRef LLVMGetGlobalParent (LLVMValueRef Global)
LLVMBool LLVMIsDeclaration (LLVMValueRef Global)
LLVMLinkage LLVMGetLinkage (LLVMValueRef Global)
void LLVMSetLinkage (LLVMValueRef Global, LLVMLinkage Linkage)
const char * LLVMGetSection (LLVMValueRef Global)
void LLVMSetSection (LLVMValueRef Global, const char *Section)
LLVMVisibility LLVMGetVisibility (LLVMValueRef Global)
void LLVMSetVisibility (LLVMValueRef Global, LLVMVisibility Viz)
LLVMDLLStorageClass LLVMGetDLLStorageClass (LLVMValueRef Global)
void LLVMSetDLLStorageClass (LLVMValueRef Global, LLVMDLLStorageClass Class)
LLVMUnnamedAddr LLVMGetUnnamedAddress (LLVMValueRef Global)
void LLVMSetUnnamedAddress (LLVMValueRef Global, LLVMUnnamedAddr UnnamedAddr)
LLVMTypeRef LLVMGlobalGetValueType (LLVMValueRef Global)
Returns the "value type" of a global value.  More...
LLVMBool LLVMHasUnnamedAddr (LLVMValueRef Global)
Deprecated: Use LLVMGetUnnamedAddress instead.  More...
void LLVMSetUnnamedAddr (LLVMValueRef Global, LLVMBool HasUnnamedAddr)
Deprecated: Use LLVMSetUnnamedAddress instead.  More...
unsigned LLVMGetAlignment (LLVMValueRef V)
Obtain the preferred alignment of the value.  More...
void LLVMSetAlignment (LLVMValueRef V, unsigned Bytes)
Set the preferred alignment of the value.  More...
void LLVMGlobalSetMetadata (LLVMValueRef Global, unsigned Kind, LLVMMetadataRef MD)
Sets a metadata attachment, erasing the existing metadata attachment if it already exists for the given kind.  More...
void LLVMGlobalEraseMetadata (LLVMValueRef Global, unsigned Kind)
Erases a metadata attachment of the given kind if it exists.  More...
void LLVMGlobalClearMetadata (LLVMValueRef Global)
Removes all metadata attachments from this value.  More...
LLVMValueMetadataEntry * LLVMGlobalCopyAllMetadata (LLVMValueRef Value, size_t *NumEntries)
Retrieves an array of metadata entries representing the metadata attached to this value.  More...
void LLVMDisposeValueMetadataEntries (LLVMValueMetadataEntry *Entries)
Destroys value metadata entries.  More...
unsigned LLVMValueMetadataEntriesGetKind (LLVMValueMetadataEntry *Entries, unsigned Index)
Returns the kind of a value metadata entry at a specific index.  More...
LLVMMetadataRef LLVMValueMetadataEntriesGetMetadata (LLVMValueMetadataEntry *Entries, unsigned Index)
Returns the underlying metadata node of a value metadata entry at a specific index.  More...

Global Variables
----------------
(Functions)
LLVMValueRef LLVMAddGlobal (LLVMModuleRef M, LLVMTypeRef Ty, const char *Name)
LLVMValueRef LLVMAddGlobalInAddressSpace (LLVMModuleRef M, LLVMTypeRef Ty, const char *Name, unsigned AddressSpace)
LLVMValueRef LLVMGetNamedGlobal (LLVMModuleRef M, const char *Name)
LLVMValueRef LLVMGetFirstGlobal (LLVMModuleRef M)
LLVMValueRef LLVMGetLastGlobal (LLVMModuleRef M)
LLVMValueRef LLVMGetNextGlobal (LLVMValueRef GlobalVar)
LLVMValueRef LLVMGetPreviousGlobal (LLVMValueRef GlobalVar)
void LLVMDeleteGlobal (LLVMValueRef GlobalVar)
LLVMValueRef LLVMGetInitializer (LLVMValueRef GlobalVar)
void LLVMSetInitializer (LLVMValueRef GlobalVar, LLVMValueRef ConstantVal)
LLVMBool LLVMIsThreadLocal (LLVMValueRef GlobalVar)
void LLVMSetThreadLocal (LLVMValueRef GlobalVar, LLVMBool IsThreadLocal)
LLVMBool LLVMIsGlobalConstant (LLVMValueRef GlobalVar)
void LLVMSetGlobalConstant (LLVMValueRef GlobalVar, LLVMBool IsConstant)
LLVMThreadLocalMode LLVMGetThreadLocalMode (LLVMValueRef GlobalVar)
void LLVMSetThreadLocalMode (LLVMValueRef GlobalVar, LLVMThreadLocalMode Mode)
LLVMBool LLVMIsExternallyInitialized (LLVMValueRef GlobalVar)
void LLVMSetExternallyInitialized (LLVMValueRef GlobalVar, LLVMBool IsExtInit)

Global Aliases
--------------
(Functions)
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMAddAlias(LLVMModuleRef M, LLVMTypeRef Ty, LLVMValueRef Aliasee, const char *Name), "Use LLVMAddAlias2 instead to support opaque pointers")
LLVMValueRef LLVMAddAlias2 (LLVMModuleRef M, LLVMTypeRef ValueTy, unsigned AddrSpace, LLVMValueRef Aliasee, const char *Name)
Add a GlobalAlias with the given value type, address space and aliasee.  More...
LLVMValueRef LLVMGetNamedGlobalAlias (LLVMModuleRef M, const char *Name, size_t NameLen)
Obtain a GlobalAlias value from a Module by its name.  More...
LLVMValueRef LLVMGetFirstGlobalAlias (LLVMModuleRef M)
Obtain an iterator to the first GlobalAlias in a Module.  More...
LLVMValueRef LLVMGetLastGlobalAlias (LLVMModuleRef M)
Obtain an iterator to the last GlobalAlias in a Module.  More...
LLVMValueRef LLVMGetNextGlobalAlias (LLVMValueRef GA)
Advance a GlobalAlias iterator to the next GlobalAlias.  More...
LLVMValueRef LLVMGetPreviousGlobalAlias (LLVMValueRef GA)
Decrement a GlobalAlias iterator to the previous GlobalAlias.  More...
LLVMValueRef LLVMAliasGetAliasee (LLVMValueRef Alias)
Retrieve the target value of an alias.  More...
void LLVMAliasSetAliasee (LLVMValueRef Alias, LLVMValueRef Aliasee)
Set the target value of an alias.  More...

Function values
---------------
Function Parameters
-------------------
(Functions)
unsigned LLVMCountParams (LLVMValueRef Fn)
Obtain the number of parameters in a function.  More...
void LLVMGetParams (LLVMValueRef Fn, LLVMValueRef *Params)
Obtain the parameters in a function.  More...
LLVMValueRef LLVMGetParam (LLVMValueRef Fn, unsigned Index)
Obtain the parameter at the specified index.  More...
LLVMValueRef LLVMGetParamParent (LLVMValueRef Inst)
Obtain the function to which this argument belongs.  More...
LLVMValueRef LLVMGetFirstParam (LLVMValueRef Fn)
Obtain the first parameter to a function.  More...
LLVMValueRef LLVMGetLastParam (LLVMValueRef Fn)
Obtain the last parameter to a function.  More...
LLVMValueRef LLVMGetNextParam (LLVMValueRef Arg)
Obtain the next parameter to a function.  More...
LLVMValueRef LLVMGetPreviousParam (LLVMValueRef Arg)
Obtain the previous parameter to a function.  More...
void LLVMSetParamAlignment (LLVMValueRef Arg, unsigned Align)
Set the alignment for a function parameter.  More...

IFuncs
------
(Functions)
LLVMValueRef LLVMAddGlobalIFunc (LLVMModuleRef M, const char *Name, size_t NameLen, LLVMTypeRef Ty, unsigned AddrSpace, LLVMValueRef Resolver)
Add a global indirect function to a module under a specified name.  More...
LLVMValueRef LLVMGetNamedGlobalIFunc (LLVMModuleRef M, const char *Name, size_t NameLen)
Obtain a GlobalIFunc value from a Module by its name.  More...
LLVMValueRef LLVMGetFirstGlobalIFunc (LLVMModuleRef M)
Obtain an iterator to the first GlobalIFunc in a Module.  More...
LLVMValueRef LLVMGetLastGlobalIFunc (LLVMModuleRef M)
Obtain an iterator to the last GlobalIFunc in a Module.  More...
LLVMValueRef LLVMGetNextGlobalIFunc (LLVMValueRef IFunc)
Advance a GlobalIFunc iterator to the next GlobalIFunc.  More...
LLVMValueRef LLVMGetPreviousGlobalIFunc (LLVMValueRef IFunc)
Decrement a GlobalIFunc iterator to the previous GlobalIFunc.  More...
LLVMValueRef LLVMGetGlobalIFuncResolver (LLVMValueRef IFunc)
Retrieves the resolver function associated with this indirect function, or NULL if it doesn't not exist.  More...
void LLVMSetGlobalIFuncResolver (LLVMValueRef IFunc, LLVMValueRef Resolver)
Sets the resolver function associated with this indirect function.  More...
void LLVMEraseGlobalIFunc (LLVMValueRef IFunc)
Remove a global indirect function from its parent module and delete it.  More...
void LLVMRemoveGlobalIFunc (LLVMValueRef IFunc)
Remove a global indirect function from its parent module.  More...

(Functions)
void LLVMDeleteFunction (LLVMValueRef Fn)
Remove a function from its containing module and deletes it.  More...
LLVMBool LLVMHasPersonalityFn (LLVMValueRef Fn)
Check whether the given function has a personality function.  More...
LLVMValueRef LLVMGetPersonalityFn (LLVMValueRef Fn)
Obtain the personality function attached to the function.  More...
void LLVMSetPersonalityFn (LLVMValueRef Fn, LLVMValueRef PersonalityFn)
Set the personality function attached to the function.  More...
unsigned LLVMLookupIntrinsicID (const char *Name, size_t NameLen)
Obtain the intrinsic ID number which matches the given function name.  More...
unsigned LLVMGetIntrinsicID (LLVMValueRef Fn)
Obtain the ID number from a function instance.  More...
LLVMValueRef LLVMGetIntrinsicDeclaration (LLVMModuleRef Mod, unsigned ID, LLVMTypeRef *ParamTypes, size_t ParamCount)
Create or insert the declaration of an intrinsic.  More...
LLVMTypeRef LLVMIntrinsicGetType (LLVMContextRef Ctx, unsigned ID, LLVMTypeRef *ParamTypes, size_t ParamCount)
Retrieves the type of an intrinsic.  More...
const char * LLVMIntrinsicGetName (unsigned ID, size_t *NameLength)
Retrieves the name of an intrinsic.  More...
const char * LLVMIntrinsicCopyOverloadedName (unsigned ID, LLVMTypeRef *ParamTypes, size_t ParamCount, size_t *NameLength)
Deprecated: Use LLVMIntrinsicCopyOverloadedName2 instead.  More...
const char * LLVMIntrinsicCopyOverloadedName2 (LLVMModuleRef Mod, unsigned ID, LLVMTypeRef *ParamTypes, size_t ParamCount, size_t *NameLength)
Copies the name of an overloaded intrinsic identified by a given list of parameter types.  More...
LLVMBool LLVMIntrinsicIsOverloaded (unsigned ID)
Obtain if the intrinsic identified by the given ID is overloaded.  More...
unsigned LLVMGetFunctionCallConv (LLVMValueRef Fn)
Obtain the calling function of a function.  More...
void LLVMSetFunctionCallConv (LLVMValueRef Fn, unsigned CC)
Set the calling convention of a function.  More...
const char * LLVMGetGC (LLVMValueRef Fn)
Obtain the name of the garbage collector to use during code generation.  More...
void LLVMSetGC (LLVMValueRef Fn, const char *Name)
Define the garbage collector to use during code generation.  More...
void LLVMAddAttributeAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx, LLVMAttributeRef A)
Add an attribute to a function.  More...
unsigned LLVMGetAttributeCountAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx)
void LLVMGetAttributesAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx, LLVMAttributeRef *Attrs)
LLVMAttributeRef LLVMGetEnumAttributeAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx, unsigned KindID)
LLVMAttributeRef LLVMGetStringAttributeAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx, const char *K, unsigned KLen)
void LLVMRemoveEnumAttributeAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx, unsigned KindID)
void LLVMRemoveStringAttributeAtIndex (LLVMValueRef F, LLVMAttributeIndex Idx, const char *K, unsigned KLen)
void LLVMAddTargetDependentFunctionAttr (LLVMValueRef Fn, const char *A, const char *V)
Add a target-dependent attribute to a function.  More...

(Functions)
LLVMValueRef LLVMConstNull (LLVMTypeRef Ty)
Obtain a constant value referring to the null instance of a type.  More...
LLVMValueRef LLVMConstAllOnes (LLVMTypeRef Ty)
Obtain a constant value referring to the instance of a type consisting of all ones.  More...
LLVMValueRef LLVMGetUndef (LLVMTypeRef Ty)
Obtain a constant value referring to an undefined value of a type.  More...
LLVMValueRef LLVMGetPoison (LLVMTypeRef Ty)
Obtain a constant value referring to a poison value of a type.  More...
LLVMBool LLVMIsNull (LLVMValueRef Val)
Determine whether a value instance is null.  More...
LLVMValueRef LLVMConstPointerNull (LLVMTypeRef Ty)
Obtain a constant that is a constant pointer pointing to NULL for a specified type.  More...


Metadata
--------
(Functions)
LLVMMetadataRef LLVMMDStringInContext2 (LLVMContextRef C, const char *Str, size_t SLen)
Create an MDString value from a given string value.  More...
LLVMMetadataRef LLVMMDNodeInContext2 (LLVMContextRef C, LLVMMetadataRef *MDs, size_t Count)
Create an MDNode value with the given array of operands.  More...
LLVMValueRef LLVMMetadataAsValue (LLVMContextRef C, LLVMMetadataRef MD)
Obtain a Metadata as a Value.  More...
LLVMMetadataRef LLVMValueAsMetadata (LLVMValueRef Val)
Obtain a Value as a Metadata.  More...
const char * LLVMGetMDString (LLVMValueRef V, unsigned *Length)
Obtain the underlying string from a MDString value.  More...
unsigned LLVMGetMDNodeNumOperands (LLVMValueRef V)
Obtain the number of operands from an MDNode value.  More...
void LLVMGetMDNodeOperands (LLVMValueRef V, LLVMValueRef *Dest)
Obtain the given MDNode's operands.  More...
LLVMValueRef LLVMMDStringInContext (LLVMContextRef C, const char *Str, unsigned SLen)
Deprecated: Use LLVMMDStringInContext2 instead.  More...
LLVMValueRef LLVMMDString (const char *Str, unsigned SLen)
Deprecated: Use LLVMMDStringInContext2 instead.  More...
LLVMValueRef LLVMMDNodeInContext (LLVMContextRef C, LLVMValueRef *Vals, unsigned Count)
Deprecated: Use LLVMMDNodeInContext2 instead.  More...
LLVMValueRef LLVMMDNode (LLVMValueRef *Vals, unsigned Count)
Deprecated: Use LLVMMDNodeInContext2 instead.  More...

Basic Block
-----------
(Functions)
LLVMValueRef LLVMBasicBlockAsValue (LLVMBasicBlockRef BB)
Convert a basic block instance to a value type.  More...
LLVMBool LLVMValueIsBasicBlock (LLVMValueRef Val)
Determine whether an LLVMValueRef is itself a basic block.  More...
LLVMBasicBlockRef LLVMValueAsBasicBlock (LLVMValueRef Val)
Convert an LLVMValueRef to an LLVMBasicBlockRef instance.  More...
const char * LLVMGetBasicBlockName (LLVMBasicBlockRef BB)
Obtain the string name of a basic block.  More...
LLVMValueRef LLVMGetBasicBlockParent (LLVMBasicBlockRef BB)
Obtain the function to which a basic block belongs.  More...
LLVMValueRef LLVMGetBasicBlockTerminator (LLVMBasicBlockRef BB)
Obtain the terminator instruction for a basic block.  More...
unsigned LLVMCountBasicBlocks (LLVMValueRef Fn)
Obtain the number of basic blocks in a function.  More...
void LLVMGetBasicBlocks (LLVMValueRef Fn, LLVMBasicBlockRef *BasicBlocks)
Obtain all of the basic blocks in a function.  More...
LLVMBasicBlockRef LLVMGetFirstBasicBlock (LLVMValueRef Fn)
Obtain the first basic block in a function.  More...
LLVMBasicBlockRef LLVMGetLastBasicBlock (LLVMValueRef Fn)
Obtain the last basic block in a function.  More...
LLVMBasicBlockRef LLVMGetNextBasicBlock (LLVMBasicBlockRef BB)
Advance a basic block iterator.  More...
LLVMBasicBlockRef LLVMGetPreviousBasicBlock (LLVMBasicBlockRef BB)
Go backwards in a basic block iterator.  More...
LLVMBasicBlockRef LLVMGetEntryBasicBlock (LLVMValueRef Fn)
Obtain the basic block that corresponds to the entry point of a function.  More...
void LLVMInsertExistingBasicBlockAfterInsertBlock (LLVMBuilderRef Builder, LLVMBasicBlockRef BB)
Insert the given basic block after the insertion point of the given builder.  More...
void LLVMAppendExistingBasicBlock (LLVMValueRef Fn, LLVMBasicBlockRef BB)
Append the given basic block to the basic block list of the given function.  More...
LLVMBasicBlockRef LLVMCreateBasicBlockInContext (LLVMContextRef C, const char *Name)
Create a new basic block without inserting it into a function.  More...
LLVMBasicBlockRef LLVMAppendBasicBlockInContext (LLVMContextRef C, LLVMValueRef Fn, const char *Name)
Append a basic block to the end of a function.  More...
LLVMBasicBlockRef LLVMAppendBasicBlock (LLVMValueRef Fn, const char *Name)
Append a basic block to the end of a function using the global context.  More...
LLVMBasicBlockRef LLVMInsertBasicBlockInContext (LLVMContextRef C, LLVMBasicBlockRef BB, const char *Name)
Insert a basic block in a function before another basic block.  More...
LLVMBasicBlockRef LLVMInsertBasicBlock (LLVMBasicBlockRef InsertBeforeBB, const char *Name)
Insert a basic block in a function using the global context.  More...
void LLVMDeleteBasicBlock (LLVMBasicBlockRef BB)
Remove a basic block from a function and delete it.  More...
void LLVMRemoveBasicBlockFromParent (LLVMBasicBlockRef BB)
Remove a basic block from a function.  More...
void LLVMMoveBasicBlockBefore (LLVMBasicBlockRef BB, LLVMBasicBlockRef MovePos)
Move a basic block to before another one.  More...
void LLVMMoveBasicBlockAfter (LLVMBasicBlockRef BB, LLVMBasicBlockRef MovePos)
Move a basic block to after another one.  More...
LLVMValueRef LLVMGetFirstInstruction (LLVMBasicBlockRef BB)
Obtain the first instruction in a basic block.  More...
LLVMValueRef LLVMGetLastInstruction (LLVMBasicBlockRef BB)
Obtain the last instruction in a basic block.  More...

Instructions
------------
Call Sites and Invocations
--------------------------
(Functions)
unsigned LLVMGetNumArgOperands (LLVMValueRef Instr)
Obtain the argument count for a call instruction.  More...
void LLVMSetInstructionCallConv (LLVMValueRef Instr, unsigned CC)
Set the calling convention for a call instruction.  More...
unsigned LLVMGetInstructionCallConv (LLVMValueRef Instr)
Obtain the calling convention for a call instruction.  More...
void LLVMSetInstrParamAlignment (LLVMValueRef Instr, LLVMAttributeIndex Idx, unsigned Align)
void LLVMAddCallSiteAttribute (LLVMValueRef C, LLVMAttributeIndex Idx, LLVMAttributeRef A)
unsigned LLVMGetCallSiteAttributeCount (LLVMValueRef C, LLVMAttributeIndex Idx)
void LLVMGetCallSiteAttributes (LLVMValueRef C, LLVMAttributeIndex Idx, LLVMAttributeRef *Attrs)
LLVMAttributeRef LLVMGetCallSiteEnumAttribute (LLVMValueRef C, LLVMAttributeIndex Idx, unsigned KindID)
LLVMAttributeRef LLVMGetCallSiteStringAttribute (LLVMValueRef C, LLVMAttributeIndex Idx, const char *K, unsigned KLen)
void LLVMRemoveCallSiteEnumAttribute (LLVMValueRef C, LLVMAttributeIndex Idx, unsigned KindID)
void LLVMRemoveCallSiteStringAttribute (LLVMValueRef C, LLVMAttributeIndex Idx, const char *K, unsigned KLen)
LLVMTypeRef LLVMGetCalledFunctionType (LLVMValueRef C)
Obtain the function type called by this instruction.  More...
LLVMValueRef LLVMGetCalledValue (LLVMValueRef Instr)
Obtain the pointer to the function invoked by this instruction.  More...
LLVMBool LLVMIsTailCall (LLVMValueRef CallInst)
Obtain whether a call instruction is a tail call.  More...
void LLVMSetTailCall (LLVMValueRef CallInst, LLVMBool IsTailCall)
Set whether a call instruction is a tail call.  More...
LLVMBasicBlockRef LLVMGetNormalDest (LLVMValueRef InvokeInst)
Return the normal destination basic block.  More...
LLVMBasicBlockRef LLVMGetUnwindDest (LLVMValueRef InvokeInst)
Return the unwind destination basic block.  More...
void LLVMSetNormalDest (LLVMValueRef InvokeInst, LLVMBasicBlockRef B)
Set the normal destination basic block.  More...
void LLVMSetUnwindDest (LLVMValueRef InvokeInst, LLVMBasicBlockRef B)
Set the unwind destination basic block.  More...

Terminators
-----------
(Functions)
unsigned LLVMGetNumSuccessors (LLVMValueRef Term)
Return the number of successors that this terminator has.  More...
LLVMBasicBlockRef LLVMGetSuccessor (LLVMValueRef Term, unsigned i)
Return the specified successor.  More...
void LLVMSetSuccessor (LLVMValueRef Term, unsigned i, LLVMBasicBlockRef block)
Update the specified successor to point at the provided block.  More...
LLVMBool LLVMIsConditional (LLVMValueRef Branch)
Return if a branch is conditional.  More...
LLVMValueRef LLVMGetCondition (LLVMValueRef Branch)
Return the condition of a branch instruction.  More...
void LLVMSetCondition (LLVMValueRef Branch, LLVMValueRef Cond)
Set the condition of a branch instruction.  More...
LLVMBasicBlockRef LLVMGetSwitchDefaultDest (LLVMValueRef SwitchInstr)
Obtain the default destination basic block of a switch instruction.  More...

Allocas
-------
(Functions)
LLVMTypeRef LLVMGetAllocatedType (LLVMValueRef Alloca)
Obtain the type that is being allocated by the alloca instruction.  More...

GEPs
----
(Functions)
LLVMBool LLVMIsInBounds (LLVMValueRef GEP)
Check whether the given GEP instruction is inbounds.  More...
void LLVMSetIsInBounds (LLVMValueRef GEP, LLVMBool InBounds)
Set the given GEP instruction to be inbounds or not.  More...
LLVMTypeRef LLVMGetGEPSourceElementType (LLVMValueRef GEP)
Get the source element type of the given GEP instruction.  More...

PHI Nodes
---------
(Functions)
void LLVMAddIncoming (LLVMValueRef PhiNode, LLVMValueRef *IncomingValues, LLVMBasicBlockRef *IncomingBlocks, unsigned Count)
Add an incoming value to the end of a PHI list.  More...
unsigned LLVMCountIncoming (LLVMValueRef PhiNode)
Obtain the number of incoming basic blocks to a PHI node.  More...
LLVMValueRef LLVMGetIncomingValue (LLVMValueRef PhiNode, unsigned Index)
Obtain an incoming value to a PHI node as an LLVMValueRef.  More...
LLVMBasicBlockRef LLVMGetIncomingBlock (LLVMValueRef PhiNode, unsigned Index)
Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.  More...

ExtractValue
------------

InsertValue
-----------
(Functions)
unsigned LLVMGetNumIndices (LLVMValueRef Inst)
Obtain the number of indices.  More...
const unsigned * LLVMGetIndices (LLVMValueRef Inst)
Obtain the indices as an array.  More...

(Functions)
int LLVMHasMetadata (LLVMValueRef Val)
Determine whether an instruction has any metadata attached.  More...
LLVMValueRef LLVMGetMetadata (LLVMValueRef Val, unsigned KindID)
Return metadata associated with an instruction value.  More...
void LLVMSetMetadata (LLVMValueRef Val, unsigned KindID, LLVMValueRef Node)
Set metadata associated with an instruction value.  More...
LLVMValueMetadataEntry * LLVMInstructionGetAllMetadataOtherThanDebugLoc (LLVMValueRef Instr, size_t *NumEntries)
Returns the metadata associated with an instruction value, but filters out all the debug locations.  More...
LLVMBasicBlockRef LLVMGetInstructionParent (LLVMValueRef Inst)
Obtain the basic block to which an instruction belongs.  More...
LLVMValueRef LLVMGetNextInstruction (LLVMValueRef Inst)
Obtain the instruction that occurs after the one specified.  More...
LLVMValueRef LLVMGetPreviousInstruction (LLVMValueRef Inst)
Obtain the instruction that occurred before this one.  More...
void LLVMInstructionRemoveFromParent (LLVMValueRef Inst)
Remove and delete an instruction.  More...
void LLVMInstructionEraseFromParent (LLVMValueRef Inst)
Remove and delete an instruction.  More...
LLVMOpcode LLVMGetInstructionOpcode (LLVMValueRef Inst)
Obtain the code opcode for an individual instruction.  More...
LLVMIntPredicate LLVMGetICmpPredicate (LLVMValueRef Inst)
Obtain the predicate of an instruction.  More...
LLVMRealPredicate LLVMGetFCmpPredicate (LLVMValueRef Inst)
Obtain the float predicate of an instruction.  More...
LLVMValueRef LLVMInstructionClone (LLVMValueRef Inst)
Create a copy of 'this' instruction that is identical in all ways except the following:  More...
LLVMValueRef LLVMIsATerminatorInst (LLVMValueRef Inst)
Determine whether an instruction is a terminator.  More...

Pass Registry
-------------
(Functions)
LLVMPassRegistryRef LLVMGetGlobalPassRegistry (void)
Return the global pass registry, for use with initialization functions.  More...

Pass Managers
-------------
(Functions)
LLVMPassManagerRef LLVMCreatePassManager (void)
Constructs a new whole-module pass pipeline.  More...
LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule (LLVMModuleRef M)
Constructs a new function-by-function pass pipeline over the module provider.  More...
LLVMPassManagerRef LLVMCreateFunctionPassManager (LLVMModuleProviderRef MP)
Deprecated: Use LLVMCreateFunctionPassManagerForModule instead.  More...
LLVMBool LLVMRunPassManager (LLVMPassManagerRef PM, LLVMModuleRef M)
Initializes, executes on the provided module, and finalizes all of the passes scheduled in the pass manager.  More...
LLVMBool LLVMInitializeFunctionPassManager (LLVMPassManagerRef FPM)
Initializes all of the function passes scheduled in the function pass manager.  More...
LLVMBool LLVMRunFunctionPassManager (LLVMPassManagerRef FPM, LLVMValueRef F)
Executes all of the function passes scheduled in the function pass manager on the provided function.  More...
LLVMBool LLVMFinalizeFunctionPassManager (LLVMPassManagerRef FPM)
Finalizes all of the function passes scheduled in the function pass manager.  More...
void LLVMDisposePassManager (LLVMPassManagerRef PM)
Frees the memory of a pass pipeline.  More...

Debug Information
-----------------
(Functions)
unsigned LLVMDebugMetadataVersion (void)
The current debug metadata version number.  More...
unsigned LLVMGetModuleDebugMetadataVersion (LLVMModuleRef Module)
The version of debug metadata that's present in the provided Module.  More...
LLVMBool LLVMStripModuleDebugInfo (LLVMModuleRef Module)
Strip debug info in the module if it exists.  More...
LLVMDIBuilderRef LLVMCreateDIBuilderDisallowUnresolved (LLVMModuleRef M)
Construct a builder for a module, and do not allow for unresolved nodes attached to the module.  More...
LLVMDIBuilderRef LLVMCreateDIBuilder (LLVMModuleRef M)
Construct a builder for a module and collect unresolved nodes attached to the module in order to resolve cycles during a call to LLVMDIBuilderFinalize.  More...
void LLVMDisposeDIBuilder (LLVMDIBuilderRef Builder)
Deallocates the DIBuilder and everything it owns.  More...
void LLVMDIBuilderFinalize (LLVMDIBuilderRef Builder)
Construct any deferred debug info descriptors.  More...
void LLVMDIBuilderFinalizeSubprogram (LLVMDIBuilderRef Builder, LLVMMetadataRef Subprogram)
Finalize a specific subprogram.  More...
LLVMMetadataRef LLVMDIBuilderCreateCompileUnit (LLVMDIBuilderRef Builder, LLVMDWARFSourceLanguage Lang, LLVMMetadataRef FileRef, const char *Producer, size_t ProducerLen, LLVMBool isOptimized, const char *Flags, size_t FlagsLen, unsigned RuntimeVer, const char *SplitName, size_t SplitNameLen, LLVMDWARFEmissionKind Kind, unsigned DWOId, LLVMBool SplitDebugInlining, LLVMBool DebugInfoForProfiling, const char *SysRoot, size_t SysRootLen, const char *SDK, size_t SDKLen)
A CompileUnit provides an anchor for all debugging information generated during this instance of compilation.  More...
LLVMMetadataRef LLVMDIBuilderCreateFile (LLVMDIBuilderRef Builder, const char *Filename, size_t FilenameLen, const char *Directory, size_t DirectoryLen)
Create a file descriptor to hold debugging information for a file.  More...
LLVMMetadataRef LLVMDIBuilderCreateModule (LLVMDIBuilderRef Builder, LLVMMetadataRef ParentScope, const char *Name, size_t NameLen, const char *ConfigMacros, size_t ConfigMacrosLen, const char *IncludePath, size_t IncludePathLen, const char *APINotesFile, size_t APINotesFileLen)
Creates a new descriptor for a module with the specified parent scope.  More...
LLVMMetadataRef LLVMDIBuilderCreateNameSpace (LLVMDIBuilderRef Builder, LLVMMetadataRef ParentScope, const char *Name, size_t NameLen, LLVMBool ExportSymbols)
Creates a new descriptor for a namespace with the specified parent scope.  More...
LLVMMetadataRef LLVMDIBuilderCreateFunction (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, const char *LinkageName, size_t LinkageNameLen, LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Ty, LLVMBool IsLocalToUnit, LLVMBool IsDefinition, unsigned ScopeLine, LLVMDIFlags Flags, LLVMBool IsOptimized)
Create a new descriptor for the specified subprogram.  More...
LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef File, unsigned Line, unsigned Column)
Create a descriptor for a lexical block with the specified parent context.  More...
LLVMMetadataRef LLVMDIBuilderCreateLexicalBlockFile (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef File, unsigned Discriminator)
Create a descriptor for a lexical block with a new file attached.  More...
LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromNamespace (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef NS, LLVMMetadataRef File, unsigned Line)
Create a descriptor for an imported namespace.  More...
LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromAlias (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef ImportedEntity, LLVMMetadataRef File, unsigned Line, LLVMMetadataRef *Elements, unsigned NumElements)
Create a descriptor for an imported module that aliases another imported entity descriptor.  More...
LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromModule (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef M, LLVMMetadataRef File, unsigned Line, LLVMMetadataRef *Elements, unsigned NumElements)
Create a descriptor for an imported module.  More...
LLVMMetadataRef LLVMDIBuilderCreateImportedDeclaration (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef Decl, LLVMMetadataRef File, unsigned Line, const char *Name, size_t NameLen, LLVMMetadataRef *Elements, unsigned NumElements)
Create a descriptor for an imported function, type, or variable.  More...
LLVMMetadataRef LLVMDIBuilderCreateDebugLocation (LLVMContextRef Ctx, unsigned Line, unsigned Column, LLVMMetadataRef Scope, LLVMMetadataRef InlinedAt)
Creates a new DebugLocation that describes a source location.  More...
unsigned LLVMDILocationGetLine (LLVMMetadataRef Location)
Get the line number of this debug location.  More...
unsigned LLVMDILocationGetColumn (LLVMMetadataRef Location)
Get the column number of this debug location.  More...
LLVMMetadataRef LLVMDILocationGetScope (LLVMMetadataRef Location)
Get the local scope associated with this debug location.  More...
LLVMMetadataRef LLVMDILocationGetInlinedAt (LLVMMetadataRef Location)
Get the "inline at" location associated with this debug location.  More...
LLVMMetadataRef LLVMDIScopeGetFile (LLVMMetadataRef Scope)
Get the metadata of the file associated with a given scope.  More...
const char * LLVMDIFileGetDirectory (LLVMMetadataRef File, unsigned *Len)
Get the directory of a given file.  More...
const char * LLVMDIFileGetFilename (LLVMMetadataRef File, unsigned *Len)
Get the name of a given file.  More...
const char * LLVMDIFileGetSource (LLVMMetadataRef File, unsigned *Len)
Get the source of a given file.  More...
LLVMMetadataRef LLVMDIBuilderGetOrCreateTypeArray (LLVMDIBuilderRef Builder, LLVMMetadataRef *Data, size_t NumElements)
Create a type array.  More...
LLVMMetadataRef LLVMDIBuilderCreateSubroutineType (LLVMDIBuilderRef Builder, LLVMMetadataRef File, LLVMMetadataRef *ParameterTypes, unsigned NumParameterTypes, LLVMDIFlags Flags)
Create subroutine type.  More...
LLVMMetadataRef LLVMDIBuilderCreateMacro (LLVMDIBuilderRef Builder, LLVMMetadataRef ParentMacroFile, unsigned Line, LLVMDWARFMacinfoRecordType RecordType, const char *Name, size_t NameLen, const char *Value, size_t ValueLen)
Create debugging information entry for a macro.  More...
LLVMMetadataRef LLVMDIBuilderCreateTempMacroFile (LLVMDIBuilderRef Builder, LLVMMetadataRef ParentMacroFile, unsigned Line, LLVMMetadataRef File)
Create debugging information temporary entry for a macro file.  More...
LLVMMetadataRef LLVMDIBuilderCreateEnumerator (LLVMDIBuilderRef Builder, const char *Name, size_t NameLen, int64_t Value, LLVMBool IsUnsigned)
Create debugging information entry for an enumerator.  More...
LLVMMetadataRef LLVMDIBuilderCreateEnumerationType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, LLVMMetadataRef *Elements, unsigned NumElements, LLVMMetadataRef ClassTy)
Create debugging information entry for an enumeration.  More...
LLVMMetadataRef LLVMDIBuilderCreateUnionType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, LLVMDIFlags Flags, LLVMMetadataRef *Elements, unsigned NumElements, unsigned RunTimeLang, const char *UniqueId, size_t UniqueIdLen)
Create debugging information entry for a union.  More...
LLVMMetadataRef LLVMDIBuilderCreateArrayType (LLVMDIBuilderRef Builder, uint64_t Size, uint32_t AlignInBits, LLVMMetadataRef Ty, LLVMMetadataRef *Subscripts, unsigned NumSubscripts)
Create debugging information entry for an array.  More...
LLVMMetadataRef LLVMDIBuilderCreateVectorType (LLVMDIBuilderRef Builder, uint64_t Size, uint32_t AlignInBits, LLVMMetadataRef Ty, LLVMMetadataRef *Subscripts, unsigned NumSubscripts)
Create debugging information entry for a vector type.  More...
LLVMMetadataRef LLVMDIBuilderCreateUnspecifiedType (LLVMDIBuilderRef Builder, const char *Name, size_t NameLen)
Create a DWARF unspecified type.  More...
LLVMMetadataRef LLVMDIBuilderCreateBasicType (LLVMDIBuilderRef Builder, const char *Name, size_t NameLen, uint64_t SizeInBits, LLVMDWARFTypeEncoding Encoding, LLVMDIFlags Flags)
Create debugging information entry for a basic type.  More...
LLVMMetadataRef LLVMDIBuilderCreatePointerType (LLVMDIBuilderRef Builder, LLVMMetadataRef PointeeTy, uint64_t SizeInBits, uint32_t AlignInBits, unsigned AddressSpace, const char *Name, size_t NameLen)
Create debugging information entry for a pointer.  More...
LLVMMetadataRef LLVMDIBuilderCreateStructType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, LLVMDIFlags Flags, LLVMMetadataRef DerivedFrom, LLVMMetadataRef *Elements, unsigned NumElements, unsigned RunTimeLang, LLVMMetadataRef VTableHolder, const char *UniqueId, size_t UniqueIdLen)
Create debugging information entry for a struct.  More...
LLVMMetadataRef LLVMDIBuilderCreateMemberType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNo, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef Ty)
Create debugging information entry for a member.  More...
LLVMMetadataRef LLVMDIBuilderCreateStaticMemberType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNumber, LLVMMetadataRef Type, LLVMDIFlags Flags, LLVMValueRef ConstantVal, uint32_t AlignInBits)
Create debugging information entry for a C++ static data member.  More...
LLVMMetadataRef LLVMDIBuilderCreateMemberPointerType (LLVMDIBuilderRef Builder, LLVMMetadataRef PointeeType, LLVMMetadataRef ClassType, uint64_t SizeInBits, uint32_t AlignInBits, LLVMDIFlags Flags)
Create debugging information entry for a pointer to member.  More...
LLVMMetadataRef LLVMDIBuilderCreateObjCIVar (LLVMDIBuilderRef Builder, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNo, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef Ty, LLVMMetadataRef PropertyNode)
Create debugging information entry for Objective-C instance variable.  More...
LLVMMetadataRef LLVMDIBuilderCreateObjCProperty (LLVMDIBuilderRef Builder, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNo, const char *GetterName, size_t GetterNameLen, const char *SetterName, size_t SetterNameLen, unsigned PropertyAttributes, LLVMMetadataRef Ty)
Create debugging information entry for Objective-C property.  More...
LLVMMetadataRef LLVMDIBuilderCreateObjectPointerType (LLVMDIBuilderRef Builder, LLVMMetadataRef Type)
Create a uniqued DIType* clone with FlagObjectPointer and FlagArtificial set.  More...
LLVMMetadataRef LLVMDIBuilderCreateQualifiedType (LLVMDIBuilderRef Builder, unsigned Tag, LLVMMetadataRef Type)
Create debugging information entry for a qualified type, e.g.  More...
LLVMMetadataRef LLVMDIBuilderCreateReferenceType (LLVMDIBuilderRef Builder, unsigned Tag, LLVMMetadataRef Type)
Create debugging information entry for a c++ style reference or rvalue reference type.  More...
LLVMMetadataRef LLVMDIBuilderCreateNullPtrType (LLVMDIBuilderRef Builder)
Create C++11 nullptr type.  More...
LLVMMetadataRef LLVMDIBuilderCreateTypedef (LLVMDIBuilderRef Builder, LLVMMetadataRef Type, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Scope, uint32_t AlignInBits)
Create debugging information entry for a typedef.  More...
LLVMMetadataRef LLVMDIBuilderCreateInheritance (LLVMDIBuilderRef Builder, LLVMMetadataRef Ty, LLVMMetadataRef BaseTy, uint64_t BaseOffset, uint32_t VBPtrOffset, LLVMDIFlags Flags)
Create debugging information entry to establish inheritance relationship between two types.  More...
LLVMMetadataRef LLVMDIBuilderCreateForwardDecl (LLVMDIBuilderRef Builder, unsigned Tag, const char *Name, size_t NameLen, LLVMMetadataRef Scope, LLVMMetadataRef File, unsigned Line, unsigned RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits, const char *UniqueIdentifier, size_t UniqueIdentifierLen)
Create a permanent forward-declared type.  More...
LLVMMetadataRef LLVMDIBuilderCreateReplaceableCompositeType (LLVMDIBuilderRef Builder, unsigned Tag, const char *Name, size_t NameLen, LLVMMetadataRef Scope, LLVMMetadataRef File, unsigned Line, unsigned RuntimeLang, uint64_t SizeInBits, uint32_t AlignInBits, LLVMDIFlags Flags, const char *UniqueIdentifier, size_t UniqueIdentifierLen)
Create a temporary forward-declared type.  More...
LLVMMetadataRef LLVMDIBuilderCreateBitFieldMemberType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits, uint64_t OffsetInBits, uint64_t StorageOffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef Type)
Create debugging information entry for a bit field member.  More...
LLVMMetadataRef LLVMDIBuilderCreateClassType (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef DerivedFrom, LLVMMetadataRef *Elements, unsigned NumElements, LLVMMetadataRef VTableHolder, LLVMMetadataRef TemplateParamsNode, const char *UniqueIdentifier, size_t UniqueIdentifierLen)
Create debugging information entry for a class.  More...
LLVMMetadataRef LLVMDIBuilderCreateArtificialType (LLVMDIBuilderRef Builder, LLVMMetadataRef Type)
Create a uniqued DIType* clone with FlagArtificial set.  More...
const char * LLVMDITypeGetName (LLVMMetadataRef DType, size_t *Length)
Get the name of this DIType.  More...
uint64_t LLVMDITypeGetSizeInBits (LLVMMetadataRef DType)
Get the size of this DIType in bits.  More...
uint64_t LLVMDITypeGetOffsetInBits (LLVMMetadataRef DType)
Get the offset of this DIType in bits.  More...
uint32_t LLVMDITypeGetAlignInBits (LLVMMetadataRef DType)
Get the alignment of this DIType in bits.  More...
unsigned LLVMDITypeGetLine (LLVMMetadataRef DType)
Get the source line where this DIType is declared.  More...
LLVMDIFlags LLVMDITypeGetFlags (LLVMMetadataRef DType)
Get the flags associated with this DIType.  More...
LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange (LLVMDIBuilderRef Builder, int64_t LowerBound, int64_t Count)
Create a descriptor for a value range.  More...
LLVMMetadataRef LLVMDIBuilderGetOrCreateArray (LLVMDIBuilderRef Builder, LLVMMetadataRef *Data, size_t NumElements)
Create an array of DI Nodes.  More...
LLVMMetadataRef LLVMDIBuilderCreateExpression (LLVMDIBuilderRef Builder, int64_t *Addr, size_t Length)
Create a new descriptor for the specified variable which has a complex address expression for its address.  More...
LLVMMetadataRef LLVMDIBuilderCreateConstantValueExpression (LLVMDIBuilderRef Builder, int64_t Value)
Create a new descriptor for the specified variable that does not have an address, but does have a constant value.  More...
LLVMMetadataRef LLVMDIBuilderCreateGlobalVariableExpression (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, const char *Linkage, size_t LinkLen, LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Ty, LLVMBool LocalToUnit, LLVMMetadataRef Expr, LLVMMetadataRef Decl, uint32_t AlignInBits)
Create a new descriptor for the specified variable.  More...
LLVMMetadataRef LLVMDIGlobalVariableExpressionGetVariable (LLVMMetadataRef GVE)
Retrieves the DIVariable associated with this global variable expression.  More...
LLVMMetadataRef LLVMDIGlobalVariableExpressionGetExpression (LLVMMetadataRef GVE)
Retrieves the DIExpression associated with this global variable expression.  More...
LLVMMetadataRef LLVMDIVariableGetFile (LLVMMetadataRef Var)
Get the metadata of the file associated with a given variable.  More...
LLVMMetadataRef LLVMDIVariableGetScope (LLVMMetadataRef Var)
Get the metadata of the scope associated with a given variable.  More...
unsigned LLVMDIVariableGetLine (LLVMMetadataRef Var)
Get the source line where this DIVariable is declared.  More...
LLVMMetadataRef LLVMTemporaryMDNode (LLVMContextRef Ctx, LLVMMetadataRef *Data, size_t NumElements)
Create a new temporary MDNode.  More...
void LLVMDisposeTemporaryMDNode (LLVMMetadataRef TempNode)
Deallocate a temporary node.  More...
void LLVMMetadataReplaceAllUsesWith (LLVMMetadataRef TempTargetMetadata, LLVMMetadataRef Replacement)
Replace all uses of temporary metadata.  More...
LLVMMetadataRef LLVMDIBuilderCreateTempGlobalVariableFwdDecl (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, const char *Linkage, size_t LnkLen, LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Ty, LLVMBool LocalToUnit, LLVMMetadataRef Decl, uint32_t AlignInBits)
Create a new descriptor for the specified global variable that is temporary and meant to be RAUWed.  More...
LLVMValueRef LLVMDIBuilderInsertDeclareBefore (LLVMDIBuilderRef Builder, LLVMValueRef Storage, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMValueRef Instr)
Insert a new llvm.dbg.declare intrinsic call before the given instruction.  More...
LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd (LLVMDIBuilderRef Builder, LLVMValueRef Storage, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMBasicBlockRef Block)
Insert a new llvm.dbg.declare intrinsic call at the end of the given basic block.  More...
LLVMValueRef LLVMDIBuilderInsertDbgValueBefore (LLVMDIBuilderRef Builder, LLVMValueRef Val, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMValueRef Instr)
Insert a new llvm.dbg.value intrinsic call before the given instruction.  More...
LLVMValueRef LLVMDIBuilderInsertDbgValueAtEnd (LLVMDIBuilderRef Builder, LLVMValueRef Val, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMBasicBlockRef Block)
Insert a new llvm.dbg.value intrinsic call at the end of the given basic block.  More...
LLVMMetadataRef LLVMDIBuilderCreateAutoVariable (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Ty, LLVMBool AlwaysPreserve, LLVMDIFlags Flags, uint32_t AlignInBits)
Create a new descriptor for a local auto variable.  More...
LLVMMetadataRef LLVMDIBuilderCreateParameterVariable (LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name, size_t NameLen, unsigned ArgNo, LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Ty, LLVMBool AlwaysPreserve, LLVMDIFlags Flags)
Create a new descriptor for a function parameter variable.  More...
LLVMMetadataRef LLVMGetSubprogram (LLVMValueRef Func)
Get the metadata of the subprogram attached to a function.  More...
void LLVMSetSubprogram (LLVMValueRef Func, LLVMMetadataRef SP)
Set the subprogram attached to a function.  More...
unsigned LLVMDISubprogramGetLine (LLVMMetadataRef Subprogram)
Get the line associated with a given subprogram.  More...
LLVMMetadataRef LLVMInstructionGetDebugLoc (LLVMValueRef Inst)
Get the debug location for the given instruction.  More...
void LLVMInstructionSetDebugLoc (LLVMValueRef Inst, LLVMMetadataRef Loc)
Set the debug location for the given instruction.  More...
LLVMMetadataKind LLVMGetMetadataKind (LLVMMetadataRef Metadata)
Obtain the enumerated type of a Metadata instance.  More...

IR Reader
---------
(Functions)
LLVMBool LLVMParseIRInContext (LLVMContextRef ContextRef, LLVMMemoryBufferRef MemBuf, LLVMModuleRef *OutM, char **OutMessage)
Read LLVM IR from a memory buffer and convert it into an in-memory Module object.  More...

Linker
------
(Functions)
LLVMBool LLVMLinkModules2 (LLVMModuleRef Dest, LLVMModuleRef Src)

New Pass Manager
----------------
(Functions)
LLVMErrorRef LLVMRunPasses (LLVMModuleRef M, const char *Passes, LLVMTargetMachineRef TM, LLVMPassBuilderOptionsRef Options)
Construct and run a set of passes over a module.  More...
LLVMPassBuilderOptionsRef LLVMCreatePassBuilderOptions (void)
Create a new set of options for a PassBuilder.  More...
void LLVMPassBuilderOptionsSetVerifyEach (LLVMPassBuilderOptionsRef Options, LLVMBool VerifyEach)
Toggle adding the VerifierPass for the PassBuilder, ensuring all functions inside the module is valid.  More...
void LLVMPassBuilderOptionsSetDebugLogging (LLVMPassBuilderOptionsRef Options, LLVMBool DebugLogging)
Toggle debug logging when running the PassBuilder.  More...
void LLVMPassBuilderOptionsSetLoopInterleaving (LLVMPassBuilderOptionsRef Options, LLVMBool LoopInterleaving)
void LLVMPassBuilderOptionsSetLoopVectorization (LLVMPassBuilderOptionsRef Options, LLVMBool LoopVectorization)
void LLVMPassBuilderOptionsSetSLPVectorization (LLVMPassBuilderOptionsRef Options, LLVMBool SLPVectorization)
void LLVMPassBuilderOptionsSetLoopUnrolling (LLVMPassBuilderOptionsRef Options, LLVMBool LoopUnrolling)
void LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll (LLVMPassBuilderOptionsRef Options, LLVMBool ForgetAllSCEVInLoopUnroll)
void LLVMPassBuilderOptionsSetLicmMssaOptCap (LLVMPassBuilderOptionsRef Options, unsigned LicmMssaOptCap)
void LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap (LLVMPassBuilderOptionsRef Options, unsigned LicmMssaNoAccForPromotionCap)
void LLVMPassBuilderOptionsSetCallGraphProfile (LLVMPassBuilderOptionsRef Options, LLVMBool CallGraphProfile)
void LLVMPassBuilderOptionsSetMergeFunctions (LLVMPassBuilderOptionsRef Options, LLVMBool MergeFunctions)
void LLVMDisposePassBuilderOptions (LLVMPassBuilderOptionsRef Options)
Dispose of a heap-allocated PassBuilderOptions instance.  More...

(Functions)
void LLVMInitializeCore (LLVMPassRegistryRef R)
void LLVMShutdown (void)
Deallocate and destroy all ManagedStatic variables.  More...
char * LLVMCreateMessage (const char *Message)
void LLVMDisposeMessage (char *Message)
LLVMBool LLVMLoadLibraryPermanently (const char *Filename)
This function permanently loads the dynamic library at the given path.  More...
void LLVMParseCommandLineOptions (int argc, const char *const *argv, const char *Overview)
This function parses the given arguments using the LLVM command line parser.  More...
void * LLVMSearchForAddressOfSymbol (const char *symbolName)
This function will search through all previously loaded dynamic libraries for the symbol symbolName.  More...
void LLVMAddSymbol (const char *symbolName, void *symbolValue)
This functions permanently adds the symbol symbolName with the value symbolValue.  More...

Instruction Builders
--------------------
(Functions)
LLVMBuilderRef LLVMCreateBuilderInContext (LLVMContextRef C)
LLVMBuilderRef LLVMCreateBuilder (void)
void LLVMPositionBuilder (LLVMBuilderRef Builder, LLVMBasicBlockRef Block, LLVMValueRef Instr)
void LLVMPositionBuilderBefore (LLVMBuilderRef Builder, LLVMValueRef Instr)
void LLVMPositionBuilderAtEnd (LLVMBuilderRef Builder, LLVMBasicBlockRef Block)
LLVMBasicBlockRef LLVMGetInsertBlock (LLVMBuilderRef Builder)
void LLVMClearInsertionPosition (LLVMBuilderRef Builder)
void LLVMInsertIntoBuilder (LLVMBuilderRef Builder, LLVMValueRef Instr)
void LLVMInsertIntoBuilderWithName (LLVMBuilderRef Builder, LLVMValueRef Instr, const char *Name)
void LLVMDisposeBuilder (LLVMBuilderRef Builder)
LLVMMetadataRef LLVMGetCurrentDebugLocation2 (LLVMBuilderRef Builder)
Get location information used by debugging information.  More...
void LLVMSetCurrentDebugLocation2 (LLVMBuilderRef Builder, LLVMMetadataRef Loc)
Set location information used by debugging information.  More...
void LLVMSetInstDebugLocation (LLVMBuilderRef Builder, LLVMValueRef Inst)
Attempts to set the debug location for the given instruction using the current debug location for the given builder.  More...
void LLVMAddMetadataToInst (LLVMBuilderRef Builder, LLVMValueRef Inst)
Adds the metadata registered with the given builder to the given instruction.  More...
LLVMMetadataRef LLVMBuilderGetDefaultFPMathTag (LLVMBuilderRef Builder)
Get the dafult floating-point math metadata for a given builder.  More...
void LLVMBuilderSetDefaultFPMathTag (LLVMBuilderRef Builder, LLVMMetadataRef FPMathTag)
Set the default floating-point math metadata for the given builder.  More...
void LLVMSetCurrentDebugLocation (LLVMBuilderRef Builder, LLVMValueRef L)
Deprecated: Passing the NULL location will crash.  More...
LLVMValueRef LLVMGetCurrentDebugLocation (LLVMBuilderRef Builder)
Deprecated: Returning the NULL location will crash.  More...
LLVMValueRef LLVMBuildRetVoid (LLVMBuilderRef)
LLVMValueRef LLVMBuildRet (LLVMBuilderRef, LLVMValueRef V)
LLVMValueRef LLVMBuildAggregateRet (LLVMBuilderRef, LLVMValueRef *RetVals, unsigned N)
LLVMValueRef LLVMBuildBr (LLVMBuilderRef, LLVMBasicBlockRef Dest)
LLVMValueRef LLVMBuildCondBr (LLVMBuilderRef, LLVMValueRef If, LLVMBasicBlockRef Then, LLVMBasicBlockRef Else)
LLVMValueRef LLVMBuildSwitch (LLVMBuilderRef, LLVMValueRef V, LLVMBasicBlockRef Else, unsigned NumCases)
LLVMValueRef LLVMBuildIndirectBr (LLVMBuilderRef B, LLVMValueRef Addr, unsigned NumDests)
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMBuildInvoke(LLVMBuilderRef, LLVMValueRef Fn, LLVMValueRef *Args, unsigned NumArgs, LLVMBasicBlockRef Then, LLVMBasicBlockRef Catch, const char *Name), "Use LLVMBuildInvoke2 instead to support opaque pointers")
LLVMValueRef LLVMBuildInvoke2 (LLVMBuilderRef, LLVMTypeRef Ty, LLVMValueRef Fn, LLVMValueRef *Args, unsigned NumArgs, LLVMBasicBlockRef Then, LLVMBasicBlockRef Catch, const char *Name)
LLVMValueRef LLVMBuildUnreachable (LLVMBuilderRef)
LLVMValueRef LLVMBuildResume (LLVMBuilderRef B, LLVMValueRef Exn)
LLVMValueRef LLVMBuildLandingPad (LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef PersFn, unsigned NumClauses, const char *Name)
LLVMValueRef LLVMBuildCleanupRet (LLVMBuilderRef B, LLVMValueRef CatchPad, LLVMBasicBlockRef BB)
LLVMValueRef LLVMBuildCatchRet (LLVMBuilderRef B, LLVMValueRef CatchPad, LLVMBasicBlockRef BB)
LLVMValueRef LLVMBuildCatchPad (LLVMBuilderRef B, LLVMValueRef ParentPad, LLVMValueRef *Args, unsigned NumArgs, const char *Name)
LLVMValueRef LLVMBuildCleanupPad (LLVMBuilderRef B, LLVMValueRef ParentPad, LLVMValueRef *Args, unsigned NumArgs, const char *Name)
LLVMValueRef LLVMBuildCatchSwitch (LLVMBuilderRef B, LLVMValueRef ParentPad, LLVMBasicBlockRef UnwindBB, unsigned NumHandlers, const char *Name)
void LLVMAddCase (LLVMValueRef Switch, LLVMValueRef OnVal, LLVMBasicBlockRef Dest)
void LLVMAddDestination (LLVMValueRef IndirectBr, LLVMBasicBlockRef Dest)
unsigned LLVMGetNumClauses (LLVMValueRef LandingPad)
LLVMValueRef LLVMGetClause (LLVMValueRef LandingPad, unsigned Idx)
void LLVMAddClause (LLVMValueRef LandingPad, LLVMValueRef ClauseVal)
LLVMBool LLVMIsCleanup (LLVMValueRef LandingPad)
void LLVMSetCleanup (LLVMValueRef LandingPad, LLVMBool Val)
void LLVMAddHandler (LLVMValueRef CatchSwitch, LLVMBasicBlockRef Dest)
unsigned LLVMGetNumHandlers (LLVMValueRef CatchSwitch)
void LLVMGetHandlers (LLVMValueRef CatchSwitch, LLVMBasicBlockRef *Handlers)
Obtain the basic blocks acting as handlers for a catchswitch instruction.  More...
LLVMValueRef LLVMGetArgOperand (LLVMValueRef Funclet, unsigned i)
void LLVMSetArgOperand (LLVMValueRef Funclet, unsigned i, LLVMValueRef value)
LLVMValueRef LLVMGetParentCatchSwitch (LLVMValueRef CatchPad)
Get the parent catchswitch instruction of a catchpad instruction.  More...
void LLVMSetParentCatchSwitch (LLVMValueRef CatchPad, LLVMValueRef CatchSwitch)
Set the parent catchswitch instruction of a catchpad instruction.  More...
LLVMValueRef LLVMBuildAdd (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNSWAdd (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNUWAdd (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFAdd (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildSub (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNSWSub (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNUWSub (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFSub (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildMul (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNSWMul (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNUWMul (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFMul (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildUDiv (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildExactUDiv (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildSDiv (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildExactSDiv (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFDiv (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildURem (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildSRem (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFRem (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildShl (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildLShr (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildAShr (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildAnd (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildOr (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildXor (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildBinOp (LLVMBuilderRef B, LLVMOpcode Op, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildNeg (LLVMBuilderRef, LLVMValueRef V, const char *Name)
LLVMValueRef LLVMBuildNSWNeg (LLVMBuilderRef B, LLVMValueRef V, const char *Name)
LLVMValueRef LLVMBuildNUWNeg (LLVMBuilderRef B, LLVMValueRef V, const char *Name)
LLVMValueRef LLVMBuildFNeg (LLVMBuilderRef, LLVMValueRef V, const char *Name)
LLVMValueRef LLVMBuildNot (LLVMBuilderRef, LLVMValueRef V, const char *Name)
LLVMValueRef LLVMBuildMalloc (LLVMBuilderRef, LLVMTypeRef Ty, const char *Name)
LLVMValueRef LLVMBuildArrayMalloc (LLVMBuilderRef, LLVMTypeRef Ty, LLVMValueRef Val, const char *Name)
LLVMValueRef LLVMBuildMemSet (LLVMBuilderRef B, LLVMValueRef Ptr, LLVMValueRef Val, LLVMValueRef Len, unsigned Align)
Creates and inserts a memset to the specified pointer and the specified value.  More...
LLVMValueRef LLVMBuildMemCpy (LLVMBuilderRef B, LLVMValueRef Dst, unsigned DstAlign, LLVMValueRef Src, unsigned SrcAlign, LLVMValueRef Size)
Creates and inserts a memcpy between the specified pointers.  More...
LLVMValueRef LLVMBuildMemMove (LLVMBuilderRef B, LLVMValueRef Dst, unsigned DstAlign, LLVMValueRef Src, unsigned SrcAlign, LLVMValueRef Size)
Creates and inserts a memmove between the specified pointers.  More...
LLVMValueRef LLVMBuildAlloca (LLVMBuilderRef, LLVMTypeRef Ty, const char *Name)
LLVMValueRef LLVMBuildArrayAlloca (LLVMBuilderRef, LLVMTypeRef Ty, LLVMValueRef Val, const char *Name)
LLVMValueRef LLVMBuildFree (LLVMBuilderRef, LLVMValueRef PointerVal)
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMBuildLoad(LLVMBuilderRef, LLVMValueRef PointerVal, const char *Name), "Use LLVMBuildLoad2 instead to support opaque pointers")
LLVMValueRef LLVMBuildLoad2 (LLVMBuilderRef, LLVMTypeRef Ty, LLVMValueRef PointerVal, const char *Name)
LLVMValueRef LLVMBuildStore (LLVMBuilderRef, LLVMValueRef Val, LLVMValueRef Ptr)
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMBuildGEP(LLVMBuilderRef B, LLVMValueRef Pointer, LLVMValueRef *Indices, unsigned NumIndices, const char *Name), "Use LLVMBuildGEP2 instead to support opaque pointers")
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMBuildInBoundsGEP(LLVMBuilderRef B, LLVMValueRef Pointer, LLVMValueRef *Indices, unsigned NumIndices, const char *Name), "Use LLVMBuildInBoundsGEP2 instead to support opaque pointers")
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMBuildStructGEP(LLVMBuilderRef B, LLVMValueRef Pointer, unsigned Idx, const char *Name), "Use LLVMBuildStructGEP2 instead to support opaque pointers")
LLVMValueRef LLVMBuildGEP2 (LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Pointer, LLVMValueRef *Indices, unsigned NumIndices, const char *Name)
LLVMValueRef LLVMBuildInBoundsGEP2 (LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Pointer, LLVMValueRef *Indices, unsigned NumIndices, const char *Name)
LLVMValueRef LLVMBuildStructGEP2 (LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Pointer, unsigned Idx, const char *Name)
LLVMValueRef LLVMBuildGlobalString (LLVMBuilderRef B, const char *Str, const char *Name)
LLVMValueRef LLVMBuildGlobalStringPtr (LLVMBuilderRef B, const char *Str, const char *Name)
LLVMBool LLVMGetVolatile (LLVMValueRef MemoryAccessInst)
void LLVMSetVolatile (LLVMValueRef MemoryAccessInst, LLVMBool IsVolatile)
LLVMBool LLVMGetWeak (LLVMValueRef CmpXchgInst)
void LLVMSetWeak (LLVMValueRef CmpXchgInst, LLVMBool IsWeak)
LLVMAtomicOrdering LLVMGetOrdering (LLVMValueRef MemoryAccessInst)
void LLVMSetOrdering (LLVMValueRef MemoryAccessInst, LLVMAtomicOrdering Ordering)
LLVMAtomicRMWBinOp LLVMGetAtomicRMWBinOp (LLVMValueRef AtomicRMWInst)
void LLVMSetAtomicRMWBinOp (LLVMValueRef AtomicRMWInst, LLVMAtomicRMWBinOp BinOp)
LLVMValueRef LLVMBuildTrunc (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildZExt (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildSExt (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildFPToUI (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildFPToSI (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildUIToFP (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildSIToFP (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildFPTrunc (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildFPExt (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildPtrToInt (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildIntToPtr (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildBitCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildAddrSpaceCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildZExtOrBitCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildSExtOrBitCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildTruncOrBitCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildCast (LLVMBuilderRef B, LLVMOpcode Op, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildPointerCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildIntCast2 (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, LLVMBool IsSigned, const char *Name)
LLVMValueRef LLVMBuildFPCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
LLVMValueRef LLVMBuildIntCast (LLVMBuilderRef, LLVMValueRef Val, LLVMTypeRef DestTy, const char *Name)
Deprecated: This cast is always signed.  More...
LLVMValueRef LLVMBuildICmp (LLVMBuilderRef, LLVMIntPredicate Op, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFCmp (LLVMBuilderRef, LLVMRealPredicate Op, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildPhi (LLVMBuilderRef, LLVMTypeRef Ty, const char *Name)
 LLVM_ATTRIBUTE_C_DEPRECATED (LLVMValueRef LLVMBuildCall(LLVMBuilderRef, LLVMValueRef Fn, LLVMValueRef *Args, unsigned NumArgs, const char *Name), "Use LLVMBuildCall2 instead to support opaque pointers")
LLVMValueRef LLVMBuildCall2 (LLVMBuilderRef, LLVMTypeRef, LLVMValueRef Fn, LLVMValueRef *Args, unsigned NumArgs, const char *Name)
LLVMValueRef LLVMBuildSelect (LLVMBuilderRef, LLVMValueRef If, LLVMValueRef Then, LLVMValueRef Else, const char *Name)
LLVMValueRef LLVMBuildVAArg (LLVMBuilderRef, LLVMValueRef List, LLVMTypeRef Ty, const char *Name)
LLVMValueRef LLVMBuildExtractElement (LLVMBuilderRef, LLVMValueRef VecVal, LLVMValueRef Index, const char *Name)
LLVMValueRef LLVMBuildInsertElement (LLVMBuilderRef, LLVMValueRef VecVal, LLVMValueRef EltVal, LLVMValueRef Index, const char *Name)
LLVMValueRef LLVMBuildShuffleVector (LLVMBuilderRef, LLVMValueRef V1, LLVMValueRef V2, LLVMValueRef Mask, const char *Name)
LLVMValueRef LLVMBuildExtractValue (LLVMBuilderRef, LLVMValueRef AggVal, unsigned Index, const char *Name)
LLVMValueRef LLVMBuildInsertValue (LLVMBuilderRef, LLVMValueRef AggVal, LLVMValueRef EltVal, unsigned Index, const char *Name)
LLVMValueRef LLVMBuildFreeze (LLVMBuilderRef, LLVMValueRef Val, const char *Name)
LLVMValueRef LLVMBuildIsNull (LLVMBuilderRef, LLVMValueRef Val, const char *Name)
LLVMValueRef LLVMBuildIsNotNull (LLVMBuilderRef, LLVMValueRef Val, const char *Name)
LLVMValueRef LLVMBuildPtrDiff (LLVMBuilderRef, LLVMValueRef LHS, LLVMValueRef RHS, const char *Name)
LLVMValueRef LLVMBuildFence (LLVMBuilderRef B, LLVMAtomicOrdering ordering, LLVMBool singleThread, const char *Name)
LLVMValueRef LLVMBuildAtomicRMW (LLVMBuilderRef B, LLVMAtomicRMWBinOp op, LLVMValueRef PTR, LLVMValueRef Val, LLVMAtomicOrdering ordering, LLVMBool singleThread)
LLVMValueRef LLVMBuildAtomicCmpXchg (LLVMBuilderRef B, LLVMValueRef Ptr, LLVMValueRef Cmp, LLVMValueRef New, LLVMAtomicOrdering SuccessOrdering, LLVMAtomicOrdering FailureOrdering, LLVMBool SingleThread)
unsigned LLVMGetNumMaskElements (LLVMValueRef ShuffleVectorInst)
Get the number of elements in the mask of a ShuffleVector instruction.  More...
int LLVMGetUndefMaskElem (void)
int LLVMGetMaskValue (LLVMValueRef ShuffleVectorInst, unsigned Elt)
Get the mask value at position Elt in the mask of a ShuffleVector instruction.  More...
LLVMBool LLVMIsAtomicSingleThread (LLVMValueRef AtomicInst)
void LLVMSetAtomicSingleThread (LLVMValueRef AtomicInst, LLVMBool SingleThread)
LLVMAtomicOrdering LLVMGetCmpXchgSuccessOrdering (LLVMValueRef CmpXchgInst)
void LLVMSetCmpXchgSuccessOrdering (LLVMValueRef CmpXchgInst, LLVMAtomicOrdering Ordering)
LLVMAtomicOrdering LLVMGetCmpXchgFailureOrdering (LLVMValueRef CmpXchgInst)
void LLVMSetCmpXchgFailureOrdering (LLVMValueRef CmpXchgInst, LLVMAtomicOrdering Ordering)

Module Providers
----------------
(Functions)
LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule (LLVMModuleRef M)
Changes the type of M so it can be passed to FunctionPassManagers and the JIT.  More...
void LLVMDisposeModuleProvider (LLVMModuleProviderRef M)
Destroys the module M.  More...

Memory Buffers
--------------
(Functions)
LLVMBool LLVMCreateMemoryBufferWithContentsOfFile (const char *Path, LLVMMemoryBufferRef *OutMemBuf, char **OutMessage)
LLVMBool LLVMCreateMemoryBufferWithSTDIN (LLVMMemoryBufferRef *OutMemBuf, char **OutMessage)
LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange (const char *InputData, size_t InputDataLength, const char *BufferName, LLVMBool RequiresNullTerminator)
LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy (const char *InputData, size_t InputDataLength, const char *BufferName)
const char * LLVMGetBufferStart (LLVMMemoryBufferRef MemBuf)
size_t LLVMGetBufferSize (LLVMMemoryBufferRef MemBuf)
void LLVMDisposeMemoryBuffer (LLVMMemoryBufferRef MemBuf)

Pass Registry
-------------

Pass Managers
-------------

Threading
---------
(Functions)
LLVMBool LLVMStartMultithreaded (void)
Deprecated: Multi-threading can only be enabled/disabled with the compile time define LLVM_ENABLE_THREADS.  More...
void LLVMStopMultithreaded (void)
Deprecated: Multi-threading can only be enabled/disabled with the compile time define LLVM_ENABLE_THREADS.  More...
LLVMBool LLVMIsMultithreaded (void)
Check whether LLVM is executing in thread-safe mode or not.  More...

Disassembler
------------
(Functions)
LLVM_C_EXTERN_C_BEGIN LLVMDisasmContextRef LLVMCreateDisasm (const char *TripleName, void *DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)
Create a disassembler for the TripleName.  More...
LLVMDisasmContextRef LLVMCreateDisasmCPU (const char *Triple, const char *CPU, void *DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)
Create a disassembler for the TripleName and a specific CPU.  More...
LLVMDisasmContextRef LLVMCreateDisasmCPUFeatures (const char *Triple, const char *CPU, const char *Features, void *DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)
Create a disassembler for the TripleName, a specific CPU and specific feature string.  More...
int LLVMSetDisasmOptions (LLVMDisasmContextRef DC, uint64_t Options)
Set the disassembler's options.  More...
void LLVMDisasmDispose (LLVMDisasmContextRef DC)
Dispose of a disassembler context.  More...
size_t LLVMDisasmInstruction (LLVMDisasmContextRef DC, uint8_t *Bytes, uint64_t BytesSize, uint64_t PC, char *OutString, size_t OutStringSize)
Disassemble a single instruction using the disassembler context specified in the parameter DC.  More...

Error Handling
--------------
(Functions)
LLVMErrorTypeId LLVMGetErrorTypeId (LLVMErrorRef Err)
Returns the type id for the given error instance, which must be a failure value (i.e.  More...
void LLVMConsumeError (LLVMErrorRef Err)
Dispose of the given error without handling it.  More...
char * LLVMGetErrorMessage (LLVMErrorRef Err)
Returns the given string's error message.  More...
void LLVMDisposeErrorMessage (char *ErrMsg)
Dispose of the given error message.  More...
LLVMErrorTypeId LLVMGetStringErrorTypeId (void)
Returns the type id for llvm StringError.  More...
LLVMErrorRef LLVMCreateStringError (const char *ErrMsg)
Create a StringError.  More...
void LLVMInstallFatalErrorHandler (LLVMFatalErrorHandler Handler)
Install a fatal error handler.  More...
void LLVMResetFatalErrorHandler (void)
Reset the fatal error handler.  More...
void LLVMEnablePrettyStackTrace (void)
Enable LLVM's built-in stack trace code.  More...

Execution Engine
----------------
LLJIT
-----
(Functions)
LLVMOrcLLJITBuilderRef LLVMOrcCreateLLJITBuilder (void)
Create an LLVMOrcLLJITBuilder.  More...
void LLVMOrcDisposeLLJITBuilder (LLVMOrcLLJITBuilderRef Builder)
Dispose of an LLVMOrcLLJITBuilderRef.  More...
void LLVMOrcLLJITBuilderSetJITTargetMachineBuilder (LLVMOrcLLJITBuilderRef Builder, LLVMOrcJITTargetMachineBuilderRef JTMB)
Set the JITTargetMachineBuilder to be used when constructing the LLJIT instance.  More...
void LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator (LLVMOrcLLJITBuilderRef Builder, LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction F, void *Ctx)
Set an ObjectLinkingLayer creator function for this LLJIT instance.  More...
LLVMErrorRef LLVMOrcCreateLLJIT (LLVMOrcLLJITRef *Result, LLVMOrcLLJITBuilderRef Builder)
Create an LLJIT instance from an LLJITBuilder.  More...
LLVMErrorRef LLVMOrcDisposeLLJIT (LLVMOrcLLJITRef J)
Dispose of an LLJIT instance.  More...
LLVMOrcExecutionSessionRef LLVMOrcLLJITGetExecutionSession (LLVMOrcLLJITRef J)
Get a reference to the ExecutionSession for this LLJIT instance.  More...
LLVMOrcJITDylibRef LLVMOrcLLJITGetMainJITDylib (LLVMOrcLLJITRef J)
Return a reference to the Main JITDylib.  More...
const char * LLVMOrcLLJITGetTripleString (LLVMOrcLLJITRef J)
Return the target triple for this LLJIT instance.  More...
char LLVMOrcLLJITGetGlobalPrefix (LLVMOrcLLJITRef J)
Returns the global prefix character according to the LLJIT's DataLayout.  More...
LLVMOrcSymbolStringPoolEntryRef LLVMOrcLLJITMangleAndIntern (LLVMOrcLLJITRef J, const char *UnmangledName)
Mangles the given string according to the LLJIT instance's DataLayout, then interns the result in the SymbolStringPool and returns a reference to the pool entry.  More...
LLVMErrorRef LLVMOrcLLJITAddObjectFile (LLVMOrcLLJITRef J, LLVMOrcJITDylibRef JD, LLVMMemoryBufferRef ObjBuffer)
Add a buffer representing an object file to the given JITDylib in the given LLJIT instance.  More...
LLVMErrorRef LLVMOrcLLJITAddObjectFileWithRT (LLVMOrcLLJITRef J, LLVMOrcResourceTrackerRef RT, LLVMMemoryBufferRef ObjBuffer)
Add a buffer representing an object file to the given ResourceTracker's JITDylib in the given LLJIT instance.  More...
LLVMErrorRef LLVMOrcLLJITAddLLVMIRModule (LLVMOrcLLJITRef J, LLVMOrcJITDylibRef JD, LLVMOrcThreadSafeModuleRef TSM)
Add an IR module to the given JITDylib in the given LLJIT instance.  More...
LLVMErrorRef LLVMOrcLLJITAddLLVMIRModuleWithRT (LLVMOrcLLJITRef J, LLVMOrcResourceTrackerRef JD, LLVMOrcThreadSafeModuleRef TSM)
Add an IR module to the given ResourceTracker's JITDylib in the given LLJIT instance.  More...
LLVMErrorRef LLVMOrcLLJITLookup (LLVMOrcLLJITRef J, LLVMOrcExecutorAddress *Result, const char *Name)
Look up the given symbol in the main JITDylib of the given LLJIT instance.  More...
LLVMOrcObjectLayerRef LLVMOrcLLJITGetObjLinkingLayer (LLVMOrcLLJITRef J)
Returns a non-owning reference to the LLJIT instance's object linking layer.  More...
LLVMOrcObjectTransformLayerRef LLVMOrcLLJITGetObjTransformLayer (LLVMOrcLLJITRef J)
Returns a non-owning reference to the LLJIT instance's object linking layer.  More...
LLVMOrcIRTransformLayerRef LLVMOrcLLJITGetIRTransformLayer (LLVMOrcLLJITRef J)
Returns a non-owning reference to the LLJIT instance's IR transform layer.  More...
const char * LLVMOrcLLJITGetDataLayoutStr (LLVMOrcLLJITRef J)
Get the LLJIT instance's default data layout string.  More...

On-Request-Compilation
----------------------
(Functions)
void LLVMOrcExecutionSessionSetErrorReporter (LLVMOrcExecutionSessionRef ES, LLVMOrcErrorReporterFunction ReportError, void *Ctx)
Attach a custom error reporter function to the ExecutionSession.  More...
LLVMOrcSymbolStringPoolRef LLVMOrcExecutionSessionGetSymbolStringPool (LLVMOrcExecutionSessionRef ES)
Return a reference to the SymbolStringPool for an ExecutionSession.  More...
void LLVMOrcSymbolStringPoolClearDeadEntries (LLVMOrcSymbolStringPoolRef SSP)
Clear all unreferenced symbol string pool entries.  More...
LLVMOrcSymbolStringPoolEntryRef LLVMOrcExecutionSessionIntern (LLVMOrcExecutionSessionRef ES, const char *Name)
Intern a string in the ExecutionSession's SymbolStringPool and return a reference to it.  More...
void LLVMOrcRetainSymbolStringPoolEntry (LLVMOrcSymbolStringPoolEntryRef S)
Increments the ref-count for a SymbolStringPool entry.  More...
void LLVMOrcReleaseSymbolStringPoolEntry (LLVMOrcSymbolStringPoolEntryRef S)
Reduces the ref-count for of a SymbolStringPool entry.  More...
const char * LLVMOrcSymbolStringPoolEntryStr (LLVMOrcSymbolStringPoolEntryRef S)
void LLVMOrcReleaseResourceTracker (LLVMOrcResourceTrackerRef RT)
Reduces the ref-count of a ResourceTracker.  More...
void LLVMOrcResourceTrackerTransferTo (LLVMOrcResourceTrackerRef SrcRT, LLVMOrcResourceTrackerRef DstRT)
Transfers tracking of all resources associated with resource tracker SrcRT to resource tracker DstRT.  More...
LLVMErrorRef LLVMOrcResourceTrackerRemove (LLVMOrcResourceTrackerRef RT)
Remove all resources associated with the given tracker.  More...
void LLVMOrcDisposeDefinitionGenerator (LLVMOrcDefinitionGeneratorRef DG)
Dispose of a JITDylib::DefinitionGenerator.  More...
void LLVMOrcDisposeMaterializationUnit (LLVMOrcMaterializationUnitRef MU)
Dispose of a MaterializationUnit.  More...
LLVMOrcMaterializationUnitRef LLVMOrcCreateCustomMaterializationUnit (const char *Name, void *Ctx, LLVMOrcCSymbolFlagsMapPairs Syms, size_t NumSyms, LLVMOrcSymbolStringPoolEntryRef InitSym, LLVMOrcMaterializationUnitMaterializeFunction Materialize, LLVMOrcMaterializationUnitDiscardFunction Discard, LLVMOrcMaterializationUnitDestroyFunction Destroy)
Create a custom MaterializationUnit.  More...
LLVMOrcMaterializationUnitRef LLVMOrcAbsoluteSymbols (LLVMOrcCSymbolMapPairs Syms, size_t NumPairs)
Create a MaterializationUnit to define the given symbols as pointing to the corresponding raw addresses.  More...
LLVMOrcMaterializationUnitRef LLVMOrcLazyReexports (LLVMOrcLazyCallThroughManagerRef LCTM, LLVMOrcIndirectStubsManagerRef ISM, LLVMOrcJITDylibRef SourceRef, LLVMOrcCSymbolAliasMapPairs CallableAliases, size_t NumPairs)
Create a MaterializationUnit to define lazy re-expots.  More...
void LLVMOrcDisposeMaterializationResponsibility (LLVMOrcMaterializationResponsibilityRef MR)
Disposes of the passed MaterializationResponsibility object.  More...
LLVMOrcJITDylibRef LLVMOrcMaterializationResponsibilityGetTargetDylib (LLVMOrcMaterializationResponsibilityRef MR)
Returns the target JITDylib that these symbols are being materialized into.  More...
LLVMOrcExecutionSessionRef LLVMOrcMaterializationResponsibilityGetExecutionSession (LLVMOrcMaterializationResponsibilityRef MR)
Returns the ExecutionSession for this MaterializationResponsibility.  More...
LLVMOrcCSymbolFlagsMapPairs LLVMOrcMaterializationResponsibilityGetSymbols (LLVMOrcMaterializationResponsibilityRef MR, size_t *NumPairs)
Returns the symbol flags map for this responsibility instance.  More...
void LLVMOrcDisposeCSymbolFlagsMap (LLVMOrcCSymbolFlagsMapPairs Pairs)
Disposes of the passed LLVMOrcCSymbolFlagsMap.  More...
LLVMOrcSymbolStringPoolEntryRef LLVMOrcMaterializationResponsibilityGetInitializerSymbol (LLVMOrcMaterializationResponsibilityRef MR)
Returns the initialization pseudo-symbol, if any.  More...
LLVMOrcSymbolStringPoolEntryRef * LLVMOrcMaterializationResponsibilityGetRequestedSymbols (LLVMOrcMaterializationResponsibilityRef MR, size_t *NumSymbols)
Returns the names of any symbols covered by this MaterializationResponsibility object that have queries pending.  More...
void LLVMOrcDisposeSymbols (LLVMOrcSymbolStringPoolEntryRef *Symbols)
Disposes of the passed LLVMOrcSymbolStringPoolEntryRef* .  More...
LLVMErrorRef LLVMOrcMaterializationResponsibilityNotifyResolved (LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcCSymbolMapPairs Symbols, size_t NumPairs)
LLVMErrorRef LLVMOrcMaterializationResponsibilityNotifyEmitted (LLVMOrcMaterializationResponsibilityRef MR)
Notifies the target JITDylib (and any pending queries on that JITDylib) that all symbols covered by this MaterializationResponsibility instance have been emitted.  More...
LLVMErrorRef LLVMOrcMaterializationResponsibilityDefineMaterializing (LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcCSymbolFlagsMapPairs Pairs, size_t NumPairs)
Attempt to claim responsibility for new definitions.  More...
void LLVMOrcMaterializationResponsibilityFailMaterialization (LLVMOrcMaterializationResponsibilityRef MR)
Notify all not-yet-emitted covered by this MaterializationResponsibility instance that an error has occurred.  More...
LLVMErrorRef LLVMOrcMaterializationResponsibilityReplace (LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcMaterializationUnitRef MU)
Transfers responsibility to the given MaterializationUnit for all symbols defined by that MaterializationUnit.  More...
LLVMErrorRef LLVMOrcMaterializationResponsibilityDelegate (LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcSymbolStringPoolEntryRef *Symbols, size_t NumSymbols, LLVMOrcMaterializationResponsibilityRef *Result)
Delegates responsibility for the given symbols to the returned materialization responsibility.  More...
void LLVMOrcMaterializationResponsibilityAddDependencies (LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcSymbolStringPoolEntryRef Name, LLVMOrcCDependenceMapPairs Dependencies, size_t NumPairs)
Adds dependencies to a symbol that the MaterializationResponsibility is responsible for.  More...
void LLVMOrcMaterializationResponsibilityAddDependenciesForAll (LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcCDependenceMapPairs Dependencies, size_t NumPairs)
Adds dependencies to all symbols that the MaterializationResponsibility is responsible for.  More...
LLVMOrcJITDylibRef LLVMOrcExecutionSessionCreateBareJITDylib (LLVMOrcExecutionSessionRef ES, const char *Name)
Create a "bare" JITDylib.  More...
LLVMErrorRef LLVMOrcExecutionSessionCreateJITDylib (LLVMOrcExecutionSessionRef ES, LLVMOrcJITDylibRef *Result, const char *Name)
Create a JITDylib.  More...
LLVMOrcJITDylibRef LLVMOrcExecutionSessionGetJITDylibByName (LLVMOrcExecutionSessionRef ES, const char *Name)
Returns the JITDylib with the given name, or NULL if no such JITDylib exists.  More...
LLVMOrcResourceTrackerRef LLVMOrcJITDylibCreateResourceTracker (LLVMOrcJITDylibRef JD)
Return a reference to a newly created resource tracker associated with JD.  More...
LLVMOrcResourceTrackerRef LLVMOrcJITDylibGetDefaultResourceTracker (LLVMOrcJITDylibRef JD)
Return a reference to the default resource tracker for the given JITDylib.  More...
LLVMErrorRef LLVMOrcJITDylibDefine (LLVMOrcJITDylibRef JD, LLVMOrcMaterializationUnitRef MU)
Add the given MaterializationUnit to the given JITDylib.  More...
LLVMErrorRef LLVMOrcJITDylibClear (LLVMOrcJITDylibRef JD)
Calls remove on all trackers associated with this JITDylib, see JITDylib::clear().  More...
void LLVMOrcJITDylibAddGenerator (LLVMOrcJITDylibRef JD, LLVMOrcDefinitionGeneratorRef DG)
Add a DefinitionGenerator to the given JITDylib.  More...
LLVMOrcDefinitionGeneratorRef LLVMOrcCreateCustomCAPIDefinitionGenerator (LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction F, void *Ctx)
Create a custom generator.  More...
LLVMErrorRef LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess (LLVMOrcDefinitionGeneratorRef *Result, char GlobalPrefx, LLVMOrcSymbolPredicate Filter, void *FilterCtx)
Get a DynamicLibrarySearchGenerator that will reflect process symbols into the JITDylib.  More...
LLVMErrorRef LLVMOrcCreateDynamicLibrarySearchGeneratorForPath (LLVMOrcDefinitionGeneratorRef *Result, const char *FileName, char GlobalPrefix, LLVMOrcSymbolPredicate Filter, void *FilterCtx)
Get a LLVMOrcCreateDynamicLibararySearchGeneratorForPath that will reflect library symbols into the JITDylib.  More...
LLVMErrorRef LLVMOrcCreateStaticLibrarySearchGeneratorForPath (LLVMOrcDefinitionGeneratorRef *Result, LLVMOrcObjectLayerRef ObjLayer, const char *FileName, const char *TargetTriple)
Get a LLVMOrcCreateStaticLibrarySearchGeneratorForPath that will reflect static library symbols into the JITDylib.  More...
LLVMOrcThreadSafeContextRef LLVMOrcCreateNewThreadSafeContext (void)
Create a ThreadSafeContext containing a new LLVMContext.  More...
LLVMContextRef LLVMOrcThreadSafeContextGetContext (LLVMOrcThreadSafeContextRef TSCtx)
Get a reference to the wrapped LLVMContext.  More...
void LLVMOrcDisposeThreadSafeContext (LLVMOrcThreadSafeContextRef TSCtx)
Dispose of a ThreadSafeContext.  More...
LLVMOrcThreadSafeModuleRef LLVMOrcCreateNewThreadSafeModule (LLVMModuleRef M, LLVMOrcThreadSafeContextRef TSCtx)
Create a ThreadSafeModule wrapper around the given LLVM module.  More...
void LLVMOrcDisposeThreadSafeModule (LLVMOrcThreadSafeModuleRef TSM)
Dispose of a ThreadSafeModule.  More...
LLVMErrorRef LLVMOrcThreadSafeModuleWithModuleDo (LLVMOrcThreadSafeModuleRef TSM, LLVMOrcGenericIRModuleOperationFunction F, void *Ctx)
Apply the given function to the module contained in this ThreadSafeModule.  More...
LLVMErrorRef LLVMOrcJITTargetMachineBuilderDetectHost (LLVMOrcJITTargetMachineBuilderRef *Result)
Create a JITTargetMachineBuilder by detecting the host.  More...
LLVMOrcJITTargetMachineBuilderRef LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine (LLVMTargetMachineRef TM)
Create a JITTargetMachineBuilder from the given TargetMachine template.  More...
void LLVMOrcDisposeJITTargetMachineBuilder (LLVMOrcJITTargetMachineBuilderRef JTMB)
Dispose of a JITTargetMachineBuilder.  More...
char * LLVMOrcJITTargetMachineBuilderGetTargetTriple (LLVMOrcJITTargetMachineBuilderRef JTMB)
Returns the target triple for the given JITTargetMachineBuilder as a string.  More...
void LLVMOrcJITTargetMachineBuilderSetTargetTriple (LLVMOrcJITTargetMachineBuilderRef JTMB, const char *TargetTriple)
Sets the target triple for the given JITTargetMachineBuilder to the given string.  More...
LLVMErrorRef LLVMOrcObjectLayerAddObjectFile (LLVMOrcObjectLayerRef ObjLayer, LLVMOrcJITDylibRef JD, LLVMMemoryBufferRef ObjBuffer)
Add an object to an ObjectLayer to the given JITDylib.  More...
LLVMErrorRef LLVMOrcObjectLayerAddObjectFileWithRT (LLVMOrcObjectLayerRef ObjLayer, LLVMOrcResourceTrackerRef RT, LLVMMemoryBufferRef ObjBuffer)
Add an object to an ObjectLayer using the given ResourceTracker.  More...
void LLVMOrcObjectLayerEmit (LLVMOrcObjectLayerRef ObjLayer, LLVMOrcMaterializationResponsibilityRef R, LLVMMemoryBufferRef ObjBuffer)
Emit an object buffer to an ObjectLayer.  More...
void LLVMOrcDisposeObjectLayer (LLVMOrcObjectLayerRef ObjLayer)
Dispose of an ObjectLayer.  More...
void LLVMOrcIRTransformLayerEmit (LLVMOrcIRTransformLayerRef IRTransformLayer, LLVMOrcMaterializationResponsibilityRef MR, LLVMOrcThreadSafeModuleRef TSM)
void LLVMOrcIRTransformLayerSetTransform (LLVMOrcIRTransformLayerRef IRTransformLayer, LLVMOrcIRTransformLayerTransformFunction TransformFunction, void *Ctx)
Set the transform function of the provided transform layer, passing through a pointer to user provided context.  More...
void LLVMOrcObjectTransformLayerSetTransform (LLVMOrcObjectTransformLayerRef ObjTransformLayer, LLVMOrcObjectTransformLayerTransformFunction TransformFunction, void *Ctx)
Set the transform function on an LLVMOrcObjectTransformLayer.  More...
LLVMOrcIndirectStubsManagerRef LLVMOrcCreateLocalIndirectStubsManager (const char *TargetTriple)
Create a LocalIndirectStubsManager from the given target triple.  More...
void LLVMOrcDisposeIndirectStubsManager (LLVMOrcIndirectStubsManagerRef ISM)
Dispose of an IndirectStubsManager.  More...
LLVMErrorRef LLVMOrcCreateLocalLazyCallThroughManager (const char *TargetTriple, LLVMOrcExecutionSessionRef ES, LLVMOrcJITTargetAddress ErrorHandlerAddr, LLVMOrcLazyCallThroughManagerRef *LCTM)
void LLVMOrcDisposeLazyCallThroughManager (LLVMOrcLazyCallThroughManagerRef LCTM)
Dispose of an LazyCallThroughManager.  More...
LLVMOrcDumpObjectsRef LLVMOrcCreateDumpObjects (const char *DumpDir, const char *IdentifierOverride)
Create a DumpObjects instance.  More...
void LLVMOrcDisposeDumpObjects (LLVMOrcDumpObjectsRef DumpObjects)
Dispose of a DumpObjects instance.  More...
LLVMErrorRef LLVMOrcDumpObjects_CallOperator (LLVMOrcDumpObjectsRef DumpObjects, LLVMMemoryBufferRef *ObjBuffer)
Dump the contents of the given MemoryBuffer.  More...

ExecutionEngine-based ORC Utils
-------------------------------
(Functions)
LLVMOrcObjectLayerRef LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager (LLVMOrcExecutionSessionRef ES)
Create a RTDyldObjectLinkingLayer instance using the standard SectionMemoryManager for memory management.  More...
void LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener (LLVMOrcObjectLayerRef RTDyldObjLinkingLayer, LLVMJITEventListenerRef Listener)
Add the given listener to the given RTDyldObjectLinkingLayer.  More...

(Functions)
void LLVMLinkInMCJIT (void)
void LLVMLinkInInterpreter (void)
LLVMGenericValueRef LLVMCreateGenericValueOfInt (LLVMTypeRef Ty, unsigned long long N, LLVMBool IsSigned)
LLVMGenericValueRef LLVMCreateGenericValueOfPointer (void *P)
LLVMGenericValueRef LLVMCreateGenericValueOfFloat (LLVMTypeRef Ty, double N)
unsigned LLVMGenericValueIntWidth (LLVMGenericValueRef GenValRef)
unsigned long long LLVMGenericValueToInt (LLVMGenericValueRef GenVal, LLVMBool IsSigned)
void * LLVMGenericValueToPointer (LLVMGenericValueRef GenVal)
double LLVMGenericValueToFloat (LLVMTypeRef TyRef, LLVMGenericValueRef GenVal)
void LLVMDisposeGenericValue (LLVMGenericValueRef GenVal)
LLVMBool LLVMCreateExecutionEngineForModule (LLVMExecutionEngineRef *OutEE, LLVMModuleRef M, char **OutError)
LLVMBool LLVMCreateInterpreterForModule (LLVMExecutionEngineRef *OutInterp, LLVMModuleRef M, char **OutError)
LLVMBool LLVMCreateJITCompilerForModule (LLVMExecutionEngineRef *OutJIT, LLVMModuleRef M, unsigned OptLevel, char **OutError)
void LLVMInitializeMCJITCompilerOptions (struct LLVMMCJITCompilerOptions *Options, size_t SizeOfOptions)
LLVMBool LLVMCreateMCJITCompilerForModule (LLVMExecutionEngineRef *OutJIT, LLVMModuleRef M, struct LLVMMCJITCompilerOptions *Options, size_t SizeOfOptions, char **OutError)
Create an MCJIT execution engine for a module, with the given options.  More...
void LLVMDisposeExecutionEngine (LLVMExecutionEngineRef EE)
void LLVMRunStaticConstructors (LLVMExecutionEngineRef EE)
void LLVMRunStaticDestructors (LLVMExecutionEngineRef EE)
int LLVMRunFunctionAsMain (LLVMExecutionEngineRef EE, LLVMValueRef F, unsigned ArgC, const char *const *ArgV, const char *const *EnvP)
LLVMGenericValueRef LLVMRunFunction (LLVMExecutionEngineRef EE, LLVMValueRef F, unsigned NumArgs, LLVMGenericValueRef *Args)
void LLVMFreeMachineCodeForFunction (LLVMExecutionEngineRef EE, LLVMValueRef F)
void LLVMAddModule (LLVMExecutionEngineRef EE, LLVMModuleRef M)
LLVMBool LLVMRemoveModule (LLVMExecutionEngineRef EE, LLVMModuleRef M, LLVMModuleRef *OutMod, char **OutError)
LLVMBool LLVMFindFunction (LLVMExecutionEngineRef EE, const char *Name, LLVMValueRef *OutFn)
void * LLVMRecompileAndRelinkFunction (LLVMExecutionEngineRef EE, LLVMValueRef Fn)
LLVMTargetDataRef LLVMGetExecutionEngineTargetData (LLVMExecutionEngineRef EE)
LLVMTargetMachineRef LLVMGetExecutionEngineTargetMachine (LLVMExecutionEngineRef EE)
void LLVMAddGlobalMapping (LLVMExecutionEngineRef EE, LLVMValueRef Global, void *Addr)
void * LLVMGetPointerToGlobal (LLVMExecutionEngineRef EE, LLVMValueRef Global)
uint64_t LLVMGetGlobalValueAddress (LLVMExecutionEngineRef EE, const char *Name)
uint64_t LLVMGetFunctionAddress (LLVMExecutionEngineRef EE, const char *Name)
LLVMBool LLVMExecutionEngineGetErrMsg (LLVMExecutionEngineRef EE, char **OutError)
Returns true on error, false on success.  More...
LLVMMCJITMemoryManagerRef LLVMCreateSimpleMCJITMemoryManager (void *Opaque, LLVMMemoryManagerAllocateCodeSectionCallback AllocateCodeSection, LLVMMemoryManagerAllocateDataSectionCallback AllocateDataSection, LLVMMemoryManagerFinalizeMemoryCallback FinalizeMemory, LLVMMemoryManagerDestroyCallback Destroy)
Create a simple custom MCJIT memory manager.  More...
void LLVMDisposeMCJITMemoryManager (LLVMMCJITMemoryManagerRef MM)
LLVMJITEventListenerRef LLVMCreateGDBRegistrationListener (void)
LLVMJITEventListenerRef LLVMCreateIntelJITEventListener (void)
LLVMJITEventListenerRef LLVMCreateOProfileJITEventListener (void)
LLVMJITEventListenerRef LLVMCreatePerfJITEventListener (void)

Initialization Routines
-----------------------
(Functions)
void LLVMInitializeCore (LLVMPassRegistryRef R)
void LLVMInitializeTransformUtils (LLVMPassRegistryRef R)
LLVMInitializeTransformUtils - C binding for initializeTransformUtilsPasses.  More...
void LLVMInitializeScalarOpts (LLVMPassRegistryRef R)
void LLVMInitializeObjCARCOpts (LLVMPassRegistryRef R)
void LLVMInitializeVectorization (LLVMPassRegistryRef R)
void LLVMInitializeInstCombine (LLVMPassRegistryRef R)
void LLVMInitializeAggressiveInstCombiner (LLVMPassRegistryRef R)
void LLVMInitializeIPO (LLVMPassRegistryRef R)
void LLVMInitializeInstrumentation (LLVMPassRegistryRef R)
LLVMInitializeInstrumentation - C binding for initializeInstrumentation.  More...
void LLVMInitializeAnalysis (LLVMPassRegistryRef R)
void LLVMInitializeIPA (LLVMPassRegistryRef R)
void LLVMInitializeCodeGen (LLVMPassRegistryRef R)
void LLVMInitializeTarget (LLVMPassRegistryRef R)

LTO
---
(Functions)
const LLVM_C_EXTERN_C_BEGIN char * lto_get_version (void)
Returns a printable string.  More...
const char * lto_get_error_message (void)
Returns the last error string or NULL if last operation was successful.  More...
lto_bool_t lto_module_is_object_file (const char *path)
Checks if a file is a loadable object file.  More...
lto_bool_t lto_module_is_object_file_for_target (const char *path, const char *target_triple_prefix)
Checks if a file is a loadable object compiled for requested target.  More...
lto_bool_t lto_module_has_objc_category (const void *mem, size_t length)
Return true if Buffer contains a bitcode file with ObjC code (category or class) in it.  More...
lto_bool_t lto_module_is_object_file_in_memory (const void *mem, size_t length)
Checks if a buffer is a loadable object file.  More...
lto_bool_t lto_module_is_object_file_in_memory_for_target (const void *mem, size_t length, const char *target_triple_prefix)
Checks if a buffer is a loadable object compiled for requested target.  More...
lto_module_t lto_module_create (const char *path)
Loads an object file from disk.  More...
lto_module_t lto_module_create_from_memory (const void *mem, size_t length)
Loads an object file from memory.  More...
lto_module_t lto_module_create_from_memory_with_path (const void *mem, size_t length, const char *path)
Loads an object file from memory with an extra path argument.  More...
lto_module_t lto_module_create_in_local_context (const void *mem, size_t length, const char *path)
Loads an object file in its own context.  More...
lto_module_t lto_module_create_in_codegen_context (const void *mem, size_t length, const char *path, lto_code_gen_t cg)
Loads an object file in the codegen context.  More...
lto_module_t lto_module_create_from_fd (int fd, const char *path, size_t file_size)
Loads an object file from disk.  More...
lto_module_t lto_module_create_from_fd_at_offset (int fd, const char *path, size_t file_size, size_t map_size, off_t offset)
Loads an object file from disk.  More...
void lto_module_dispose (lto_module_t mod)
Frees all memory internally allocated by the module.  More...
const char * lto_module_get_target_triple (lto_module_t mod)
Returns triple string which the object module was compiled under.  More...
void lto_module_set_target_triple (lto_module_t mod, const char *triple)
Sets triple string with which the object will be codegened.  More...
unsigned int lto_module_get_num_symbols (lto_module_t mod)
Returns the number of symbols in the object module.  More...
const char * lto_module_get_symbol_name (lto_module_t mod, unsigned int index)
Returns the name of the ith symbol in the object module.  More...
lto_symbol_attributes lto_module_get_symbol_attribute (lto_module_t mod, unsigned int index)
Returns the attributes of the ith symbol in the object module.  More...
const char * lto_module_get_linkeropts (lto_module_t mod)
Returns the module's linker options.  More...
lto_bool_t lto_module_get_macho_cputype (lto_module_t mod, unsigned int *out_cputype, unsigned int *out_cpusubtype)
If targeting mach-o on darwin, this function gets the CPU type and subtype that will end up being encoded in the mach-o header.  More...
lto_bool_t lto_module_has_ctor_dtor (lto_module_t mod)
This function can be used by the linker to check if a given module has any constructor or destructor functions.  More...
void lto_codegen_set_diagnostic_handler (lto_code_gen_t, lto_diagnostic_handler_t, void *)
Set a diagnostic handler and the related context (void *).  More...
lto_code_gen_t lto_codegen_create (void)
Instantiates a code generator.  More...
lto_code_gen_t lto_codegen_create_in_local_context (void)
Instantiate a code generator in its own context.  More...
void lto_codegen_dispose (lto_code_gen_t)
Frees all code generator and all memory it internally allocated.  More...
lto_bool_t lto_codegen_add_module (lto_code_gen_t cg, lto_module_t mod)
Add an object module to the set of modules for which code will be generated.  More...
void lto_codegen_set_module (lto_code_gen_t cg, lto_module_t mod)
Sets the object module for code generation.  More...
lto_bool_t lto_codegen_set_debug_model (lto_code_gen_t cg, lto_debug_model)
Sets if debug info should be generated.  More...
lto_bool_t lto_codegen_set_pic_model (lto_code_gen_t cg, lto_codegen_model)
Sets which PIC code model to generated.  More...
void lto_codegen_set_cpu (lto_code_gen_t cg, const char *cpu)
Sets the cpu to generate code for.  More...
void lto_codegen_set_assembler_path (lto_code_gen_t cg, const char *path)
Sets the location of the assembler tool to run.  More...
void lto_codegen_set_assembler_args (lto_code_gen_t cg, const char **args, int nargs)
Sets extra arguments that libLTO should pass to the assembler.  More...
void lto_codegen_add_must_preserve_symbol (lto_code_gen_t cg, const char *symbol)
Adds to a list of all global symbols that must exist in the final generated code.  More...
lto_bool_t lto_codegen_write_merged_modules (lto_code_gen_t cg, const char *path)
Writes a new object file at the specified path that contains the merged contents of all modules added so far.  More...
const void * lto_codegen_compile (lto_code_gen_t cg, size_t *length)
Generates code for all added modules into one native object file.  More...
lto_bool_t lto_codegen_compile_to_file (lto_code_gen_t cg, const char **name)
Generates code for all added modules into one native object file.  More...
lto_bool_t lto_codegen_optimize (lto_code_gen_t cg)
Runs optimization for the merged module.  More...
const void * lto_codegen_compile_optimized (lto_code_gen_t cg, size_t *length)
Generates code for the optimized merged module into one native object file.  More...
unsigned int lto_api_version (void)
Returns the runtime API version.  More...
void lto_set_debug_options (const char *const *options, int number)
Parses options immediately, making them available as early as possible.  More...
void lto_codegen_debug_options (lto_code_gen_t cg, const char *)
Sets options to help debug codegen bugs.  More...
void lto_codegen_debug_options_array (lto_code_gen_t cg, const char *const *, int number)
Same as the previous function, but takes every option separately through an array.  More...
void lto_initialize_disassembler (void)
Initializes LLVM disassemblers.  More...
void lto_codegen_set_should_internalize (lto_code_gen_t cg, lto_bool_t ShouldInternalize)
Sets if we should run internalize pass during optimization and code generation.  More...
void lto_codegen_set_should_embed_uselists (lto_code_gen_t cg, lto_bool_t ShouldEmbedUselists)
Set whether to embed uselists in bitcode.  More...
lto_input_t lto_input_create (const void *buffer, size_t buffer_size, const char *path)
Creates an LTO input file from a buffer.  More...
void lto_input_dispose (lto_input_t input)
Frees all memory internally allocated by the LTO input file.  More...
unsigned lto_input_get_num_dependent_libraries (lto_input_t input)
Returns the number of dependent library specifiers for the given LTO input file.  More...
const char * lto_input_get_dependent_library (lto_input_t input, size_t index, size_t *size)
Returns the ith dependent library specifier for the given LTO input file.  More...
const char *const * lto_runtime_lib_symbols_list (size_t *size)
Returns the list of libcall symbols that can be generated by LTO that might not be visible from the symbol table of bitcode files.  More...

ThinLTO
-------
ThinLTO Cache Control
---------------------
(Functions)
void thinlto_codegen_set_cache_dir (thinlto_code_gen_t cg, const char *cache_dir)
Sets the path to a directory to use as a cache storage for incremental build.  More...
void thinlto_codegen_set_cache_pruning_interval (thinlto_code_gen_t cg, int interval)
Sets the cache pruning interval (in seconds).  More...
void thinlto_codegen_set_final_cache_size_relative_to_available_space (thinlto_code_gen_t cg, unsigned percentage)
Sets the maximum cache size that can be persistent across build, in terms of percentage of the available space on the disk.  More...
void thinlto_codegen_set_cache_entry_expiration (thinlto_code_gen_t cg, unsigned expiration)
Sets the expiration (in seconds) for an entry in the cache.  More...
void thinlto_codegen_set_cache_size_bytes (thinlto_code_gen_t cg, unsigned max_size_bytes)
Sets the maximum size of the cache directory (in bytes).  More...
void thinlto_codegen_set_cache_size_megabytes (thinlto_code_gen_t cg, unsigned max_size_megabytes)
Same as thinlto_codegen_set_cache_size_bytes, except the maximum size is in megabytes (2^20 bytes).  More...
void thinlto_codegen_set_cache_size_files (thinlto_code_gen_t cg, unsigned max_size_files)
Sets the maximum number of files in the cache directory.  More...

(Functions)
thinlto_code_gen_t thinlto_create_codegen (void)
Instantiates a ThinLTO code generator.  More...
void thinlto_codegen_dispose (thinlto_code_gen_t cg)
Frees the generator and all memory it internally allocated.  More...
void thinlto_codegen_add_module (thinlto_code_gen_t cg, const char *identifier, const char *data, int length)
Add a module to a ThinLTO code generator.  More...
void thinlto_codegen_process (thinlto_code_gen_t cg)
Optimize and codegen all the modules added to the codegenerator using ThinLTO.  More...
unsigned int thinlto_module_get_num_objects (thinlto_code_gen_t cg)
Returns the number of object files produced by the ThinLTO CodeGenerator.  More...
LTOObjectBuffer thinlto_module_get_object (thinlto_code_gen_t cg, unsigned int index)
Returns a reference to the ith object file produced by the ThinLTO CodeGenerator.  More...
unsigned int thinlto_module_get_num_object_files (thinlto_code_gen_t cg)
Returns the number of object files produced by the ThinLTO CodeGenerator.  More...
const char * thinlto_module_get_object_file (thinlto_code_gen_t cg, unsigned int index)
Returns the path to the ith object file produced by the ThinLTO CodeGenerator.  More...
lto_bool_t thinlto_codegen_set_pic_model (thinlto_code_gen_t cg, lto_codegen_model)
Sets which PIC code model to generate.  More...
void thinlto_codegen_set_savetemps_dir (thinlto_code_gen_t cg, const char *save_temps_dir)
Sets the path to a directory to use as a storage for temporary bitcode files.  More...
void thinlto_set_generated_objects_dir (thinlto_code_gen_t cg, const char *save_temps_dir)
Set the path to a directory where to save generated object files.  More...
void thinlto_codegen_set_cpu (thinlto_code_gen_t cg, const char *cpu)
Sets the cpu to generate code for.  More...
void thinlto_codegen_disable_codegen (thinlto_code_gen_t cg, lto_bool_t disable)
Disable CodeGen, only run the stages till codegen and stop.  More...
void thinlto_codegen_set_codegen_only (thinlto_code_gen_t cg, lto_bool_t codegen_only)
Perform CodeGen only: disable all other stages.  More...
void thinlto_debug_options (const char *const *options, int number)
Parse -mllvm style debug options.  More...
lto_bool_t lto_module_is_thinlto (lto_module_t mod)
Test if a module has support for ThinLTO linking.  More...
void thinlto_codegen_add_must_preserve_symbol (thinlto_code_gen_t cg, const char *name, int length)
Adds a symbol to the list of global symbols that must exist in the final generated code.  More...
void thinlto_codegen_add_cross_referenced_symbol (thinlto_code_gen_t cg, const char *name, int length)
Adds a symbol to the list of global symbols that are cross-referenced between ThinLTO files.  More...

Object file reading and writing
-------------------------------
(Functions)
LLVMBinaryRef LLVMCreateBinary (LLVMMemoryBufferRef MemBuf, LLVMContextRef Context, char **ErrorMessage)
Create a binary file from the given memory buffer.  More...
void LLVMDisposeBinary (LLVMBinaryRef BR)
Dispose of a binary file.  More...
LLVMMemoryBufferRef LLVMBinaryCopyMemoryBuffer (LLVMBinaryRef BR)
Retrieves a copy of the memory buffer associated with this object file.  More...
LLVMBinaryType LLVMBinaryGetType (LLVMBinaryRef BR)
Retrieve the specific type of a binary.  More...
LLVMBinaryRef LLVMMachOUniversalBinaryCopyObjectForArch (LLVMBinaryRef BR, const char *Arch, size_t ArchLen, char **ErrorMessage)
LLVMSectionIteratorRef LLVMObjectFileCopySectionIterator (LLVMBinaryRef BR)
Retrieve a copy of the section iterator for this object file.  More...
LLVMBool LLVMObjectFileIsSectionIteratorAtEnd (LLVMBinaryRef BR, LLVMSectionIteratorRef SI)
Returns whether the given section iterator is at the end.  More...
LLVMSymbolIteratorRef LLVMObjectFileCopySymbolIterator (LLVMBinaryRef BR)
Retrieve a copy of the symbol iterator for this object file.  More...
LLVMBool LLVMObjectFileIsSymbolIteratorAtEnd (LLVMBinaryRef BR, LLVMSymbolIteratorRef SI)
Returns whether the given symbol iterator is at the end.  More...
void LLVMDisposeSectionIterator (LLVMSectionIteratorRef SI)
void LLVMMoveToNextSection (LLVMSectionIteratorRef SI)
void LLVMMoveToContainingSection (LLVMSectionIteratorRef Sect, LLVMSymbolIteratorRef Sym)
void LLVMDisposeSymbolIterator (LLVMSymbolIteratorRef SI)
void LLVMMoveToNextSymbol (LLVMSymbolIteratorRef SI)
const char * LLVMGetSectionName (LLVMSectionIteratorRef SI)
uint64_t LLVMGetSectionSize (LLVMSectionIteratorRef SI)
const char * LLVMGetSectionContents (LLVMSectionIteratorRef SI)
uint64_t LLVMGetSectionAddress (LLVMSectionIteratorRef SI)
LLVMBool LLVMGetSectionContainsSymbol (LLVMSectionIteratorRef SI, LLVMSymbolIteratorRef Sym)
LLVMRelocationIteratorRef LLVMGetRelocations (LLVMSectionIteratorRef Section)
void LLVMDisposeRelocationIterator (LLVMRelocationIteratorRef RI)
LLVMBool LLVMIsRelocationIteratorAtEnd (LLVMSectionIteratorRef Section, LLVMRelocationIteratorRef RI)
void LLVMMoveToNextRelocation (LLVMRelocationIteratorRef RI)
const char * LLVMGetSymbolName (LLVMSymbolIteratorRef SI)
uint64_t LLVMGetSymbolAddress (LLVMSymbolIteratorRef SI)
uint64_t LLVMGetSymbolSize (LLVMSymbolIteratorRef SI)
uint64_t LLVMGetRelocationOffset (LLVMRelocationIteratorRef RI)
LLVMSymbolIteratorRef LLVMGetRelocationSymbol (LLVMRelocationIteratorRef RI)
uint64_t LLVMGetRelocationType (LLVMRelocationIteratorRef RI)
const char * LLVMGetRelocationTypeName (LLVMRelocationIteratorRef RI)
const char * LLVMGetRelocationValueString (LLVMRelocationIteratorRef RI)
LLVMObjectFileRef LLVMCreateObjectFile (LLVMMemoryBufferRef MemBuf)
Deprecated: Use LLVMCreateBinary instead.  More...
void LLVMDisposeObjectFile (LLVMObjectFileRef ObjectFile)
Deprecated: Use LLVMDisposeBinary instead.  More...
LLVMSectionIteratorRef LLVMGetSections (LLVMObjectFileRef ObjectFile)
Deprecated: Use LLVMObjectFileCopySectionIterator instead.  More...
LLVMBool LLVMIsSectionIteratorAtEnd (LLVMObjectFileRef ObjectFile, LLVMSectionIteratorRef SI)
Deprecated: Use LLVMObjectFileIsSectionIteratorAtEnd instead.  More...
LLVMSymbolIteratorRef LLVMGetSymbols (LLVMObjectFileRef ObjectFile)
Deprecated: Use LLVMObjectFileCopySymbolIterator instead.  More...
LLVMBool LLVMIsSymbolIteratorAtEnd (LLVMObjectFileRef ObjectFile, LLVMSymbolIteratorRef SI)
Deprecated: Use LLVMObjectFileIsSymbolIteratorAtEnd instead.  More...

Remarks
-------
(Functions)
const char * LLVMRemarkStringGetData (LLVMRemarkStringRef String)
Returns the buffer holding the string.  More...
uint32_t LLVMRemarkStringGetLen (LLVMRemarkStringRef String)
Returns the size of the string.  More...
LLVMRemarkStringRef LLVMRemarkDebugLocGetSourceFilePath (LLVMRemarkDebugLocRef DL)
Return the path to the source file for a debug location.  More...
uint32_t LLVMRemarkDebugLocGetSourceLine (LLVMRemarkDebugLocRef DL)
Return the line in the source file for a debug location.  More...
uint32_t LLVMRemarkDebugLocGetSourceColumn (LLVMRemarkDebugLocRef DL)
Return the column in the source file for a debug location.  More...
LLVMRemarkStringRef LLVMRemarkArgGetKey (LLVMRemarkArgRef Arg)
Returns the key of an argument.  More...
LLVMRemarkStringRef LLVMRemarkArgGetValue (LLVMRemarkArgRef Arg)
Returns the value of an argument.  More...
LLVMRemarkDebugLocRef LLVMRemarkArgGetDebugLoc (LLVMRemarkArgRef Arg)
Returns the debug location that is attached to the value of this argument.  More...
void LLVMRemarkEntryDispose (LLVMRemarkEntryRef Remark)
Free the resources used by the remark entry.  More...
enum LLVMRemarkType LLVMRemarkEntryGetType (LLVMRemarkEntryRef Remark)
The type of the remark.  More...
LLVMRemarkStringRef LLVMRemarkEntryGetPassName (LLVMRemarkEntryRef Remark)
Get the name of the pass that emitted this remark.  More...
LLVMRemarkStringRef LLVMRemarkEntryGetRemarkName (LLVMRemarkEntryRef Remark)
Get an identifier of the remark.  More...
LLVMRemarkStringRef LLVMRemarkEntryGetFunctionName (LLVMRemarkEntryRef Remark)
Get the name of the function being processed when the remark was emitted.  More...
LLVMRemarkDebugLocRef LLVMRemarkEntryGetDebugLoc (LLVMRemarkEntryRef Remark)
Returns the debug location that is attached to this remark.  More...
uint64_t LLVMRemarkEntryGetHotness (LLVMRemarkEntryRef Remark)
Return the hotness of the remark.  More...
uint32_t LLVMRemarkEntryGetNumArgs (LLVMRemarkEntryRef Remark)
The number of arguments the remark holds.  More...
LLVMRemarkArgRef LLVMRemarkEntryGetFirstArg (LLVMRemarkEntryRef Remark)
Get a new iterator to iterate over a remark's argument.  More...
LLVMRemarkArgRef LLVMRemarkEntryGetNextArg (LLVMRemarkArgRef It, LLVMRemarkEntryRef Remark)
Get the next argument in Remark from the position of It.  More...
LLVMRemarkParserRef LLVMRemarkParserCreateYAML (const void *Buf, uint64_t Size)
Creates a remark parser that can be used to parse the buffer located in Buf of size Size bytes.  More...
LLVMRemarkParserRef LLVMRemarkParserCreateBitstream (const void *Buf, uint64_t Size)
Creates a remark parser that can be used to parse the buffer located in Buf of size Size bytes.  More...
LLVMRemarkEntryRef LLVMRemarkParserGetNext (LLVMRemarkParserRef Parser)
Returns the next remark in the file.  More...
LLVMBool LLVMRemarkParserHasError (LLVMRemarkParserRef Parser)
Returns 1 if the parser encountered an error while parsing the buffer.  More...
const char * LLVMRemarkParserGetErrorMessage (LLVMRemarkParserRef Parser)
Returns a null-terminated string containing an error message.  More...
void LLVMRemarkParserDispose (LLVMRemarkParserRef Parser)
Releases all the resources used by Parser.  More...
uint32_t LLVMRemarkVersion (void)
Returns the version of the remarks library.  More...

Target information
------------------
(Functions)
static void LLVMInitializeAllTargetInfos (void)
LLVMInitializeAllTargetInfos - The main program should call this function if it wants access to all available targets that LLVM is configured to support.  More...
static void LLVMInitializeAllTargets (void)
LLVMInitializeAllTargets - The main program should call this function if it wants to link in all available targets that LLVM is configured to support.  More...
static void LLVMInitializeAllTargetMCs (void)
LLVMInitializeAllTargetMCs - The main program should call this function if it wants access to all available target MC that LLVM is configured to support.  More...
static void LLVMInitializeAllAsmPrinters (void)
LLVMInitializeAllAsmPrinters - The main program should call this function if it wants all asm printers that LLVM is configured to support, to make them available via the TargetRegistry.  More...
static void LLVMInitializeAllAsmParsers (void)
LLVMInitializeAllAsmParsers - The main program should call this function if it wants all asm parsers that LLVM is configured to support, to make them available via the TargetRegistry.  More...
static void LLVMInitializeAllDisassemblers (void)
LLVMInitializeAllDisassemblers - The main program should call this function if it wants all disassemblers that LLVM is configured to support, to make them available via the TargetRegistry.  More...
static LLVMBool LLVMInitializeNativeTarget (void)
LLVMInitializeNativeTarget - The main program should call this function to initialize the native target corresponding to the host.  More...
static LLVMBool LLVMInitializeNativeAsmParser (void)
LLVMInitializeNativeTargetAsmParser - The main program should call this function to initialize the parser for the native target corresponding to the host.  More...
static LLVMBool LLVMInitializeNativeAsmPrinter (void)
LLVMInitializeNativeTargetAsmPrinter - The main program should call this function to initialize the printer for the native target corresponding to the host.  More...
static LLVMBool LLVMInitializeNativeDisassembler (void)
LLVMInitializeNativeTargetDisassembler - The main program should call this function to initialize the disassembler for the native target corresponding to the host.  More...
LLVMTargetDataRef LLVMGetModuleDataLayout (LLVMModuleRef M)
Obtain the data layout for a module.  More...
void LLVMSetModuleDataLayout (LLVMModuleRef M, LLVMTargetDataRef DL)
Set the data layout for a module.  More...
LLVMTargetDataRef LLVMCreateTargetData (const char *StringRep)
Creates target data from a target layout string.  More...
void LLVMDisposeTargetData (LLVMTargetDataRef TD)
Deallocates a TargetData.  More...
void LLVMAddTargetLibraryInfo (LLVMTargetLibraryInfoRef TLI, LLVMPassManagerRef PM)
Adds target library information to a pass manager.  More...
char * LLVMCopyStringRepOfTargetData (LLVMTargetDataRef TD)
Converts target data to a target layout string.  More...
enum LLVMByteOrdering LLVMByteOrder (LLVMTargetDataRef TD)
Returns the byte order of a target, either LLVMBigEndian or LLVMLittleEndian.  More...
unsigned LLVMPointerSize (LLVMTargetDataRef TD)
Returns the pointer size in bytes for a target.  More...
unsigned LLVMPointerSizeForAS (LLVMTargetDataRef TD, unsigned AS)
Returns the pointer size in bytes for a target for a specified address space.  More...
LLVMTypeRef LLVMIntPtrType (LLVMTargetDataRef TD)
Returns the integer type that is the same size as a pointer on a target.  More...
LLVMTypeRef LLVMIntPtrTypeForAS (LLVMTargetDataRef TD, unsigned AS)
Returns the integer type that is the same size as a pointer on a target.  More...
LLVMTypeRef LLVMIntPtrTypeInContext (LLVMContextRef C, LLVMTargetDataRef TD)
Returns the integer type that is the same size as a pointer on a target.  More...
LLVMTypeRef LLVMIntPtrTypeForASInContext (LLVMContextRef C, LLVMTargetDataRef TD, unsigned AS)
Returns the integer type that is the same size as a pointer on a target.  More...
unsigned long long LLVMSizeOfTypeInBits (LLVMTargetDataRef TD, LLVMTypeRef Ty)
Computes the size of a type in bytes for a target.  More...
unsigned long long LLVMStoreSizeOfType (LLVMTargetDataRef TD, LLVMTypeRef Ty)
Computes the storage size of a type in bytes for a target.  More...
unsigned long long LLVMABISizeOfType (LLVMTargetDataRef TD, LLVMTypeRef Ty)
Computes the ABI size of a type in bytes for a target.  More...
unsigned LLVMABIAlignmentOfType (LLVMTargetDataRef TD, LLVMTypeRef Ty)
Computes the ABI alignment of a type in bytes for a target.  More...
unsigned LLVMCallFrameAlignmentOfType (LLVMTargetDataRef TD, LLVMTypeRef Ty)
Computes the call frame alignment of a type in bytes for a target.  More...
unsigned LLVMPreferredAlignmentOfType (LLVMTargetDataRef TD, LLVMTypeRef Ty)
Computes the preferred alignment of a type in bytes for a target.  More...
unsigned LLVMPreferredAlignmentOfGlobal (LLVMTargetDataRef TD, LLVMValueRef GlobalVar)
Computes the preferred alignment of a global variable in bytes for a target.  More...
unsigned LLVMElementAtOffset (LLVMTargetDataRef TD, LLVMTypeRef StructTy, unsigned long long Offset)
Computes the structure element that contains the byte offset for a target.  More...
unsigned long long LLVMOffsetOfElement (LLVMTargetDataRef TD, LLVMTypeRef StructTy, unsigned Element)
Computes the byte offset of the indexed struct element for a target.  More...
LLVMTargetRef LLVMGetFirstTarget (void)
Returns the first llvm::Target in the registered targets list.  More...
LLVMTargetRef LLVMGetNextTarget (LLVMTargetRef T)
Returns the next llvm::Target given a previous one (or null if there's none)  More...
LLVMTargetRef LLVMGetTargetFromName (const char *Name)
Finds the target corresponding to the given name and stores it in T.  More...
LLVMBool LLVMGetTargetFromTriple (const char *Triple, LLVMTargetRef *T, char **ErrorMessage)
Finds the target corresponding to the given triple and stores it in T.  More...
const char * LLVMGetTargetName (LLVMTargetRef T)
Returns the name of a target.  More...
const char * LLVMGetTargetDescription (LLVMTargetRef T)
Returns the description of a target.  More...
LLVMBool LLVMTargetHasJIT (LLVMTargetRef T)
Returns if the target has a JIT.  More...
LLVMBool LLVMTargetHasTargetMachine (LLVMTargetRef T)
Returns if the target has a TargetMachine associated.  More...
LLVMBool LLVMTargetHasAsmBackend (LLVMTargetRef T)
Returns if the target as an ASM backend (required for emitting output)  More...
LLVMTargetMachineRef LLVMCreateTargetMachine (LLVMTargetRef T, const char *Triple, const char *CPU, const char *Features, LLVMCodeGenOptLevel Level, LLVMRelocMode Reloc, LLVMCodeModel CodeModel)
Creates a new llvm::TargetMachine.  More...
void LLVMDisposeTargetMachine (LLVMTargetMachineRef T)
Dispose the LLVMTargetMachineRef instance generated by LLVMCreateTargetMachine.  More...
LLVMTargetRef LLVMGetTargetMachineTarget (LLVMTargetMachineRef T)
Returns the Target used in a TargetMachine.  More...
char * LLVMGetTargetMachineTriple (LLVMTargetMachineRef T)
Returns the triple used creating this target machine.  More...
char * LLVMGetTargetMachineCPU (LLVMTargetMachineRef T)
Returns the cpu used creating this target machine.  More...
char * LLVMGetTargetMachineFeatureString (LLVMTargetMachineRef T)
Returns the feature string used creating this target machine.  More...
LLVMTargetDataRef LLVMCreateTargetDataLayout (LLVMTargetMachineRef T)
Create a DataLayout based on the targetMachine.  More...
void LLVMSetTargetMachineAsmVerbosity (LLVMTargetMachineRef T, LLVMBool VerboseAsm)
Set the target machine's ASM verbosity.  More...
LLVMBool LLVMTargetMachineEmitToFile (LLVMTargetMachineRef T, LLVMModuleRef M, char *Filename, LLVMCodeGenFileType codegen, char **ErrorMessage)
Emits an asm or object file for the given module to the filename.  More...
LLVMBool LLVMTargetMachineEmitToMemoryBuffer (LLVMTargetMachineRef T, LLVMModuleRef M, LLVMCodeGenFileType codegen, char **ErrorMessage, LLVMMemoryBufferRef *OutMemBuf)
Compile the LLVM IR stored in M and store the result in OutMemBuf.  More...
char * LLVMGetDefaultTargetTriple (void)
Get a triple for the host machine as a string.  More...
char * LLVMNormalizeTargetTriple (const char *triple)
Normalize a target triple.  More...
char * LLVMGetHostCPUName (void)
Get the host CPU as a string.  More...
char * LLVMGetHostCPUFeatures (void)
Get the host CPU's features as a string.  More...
void LLVMAddAnalysisPasses (LLVMTargetMachineRef T, LLVMPassManagerRef PM)
Adds the target-specific analysis passes to the pass manager.  More...

